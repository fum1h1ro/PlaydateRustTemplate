/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __VISIONOS_1_0: u32 = 10000;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140200;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const LCD_COLUMNS: u32 = 400;
pub const LCD_ROWS: u32 = 240;
pub const LCD_ROWSIZE: u32 = 52;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const AUDIO_FRAMES_PER_CYCLE: u32 = 512;
pub const NOTE_C4: u32 = 60;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_FAST_FMA: u32 = 1;
pub const FP_FAST_FMAF: u32 = 1;
pub const FP_FAST_FMAL: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_longlong;
pub type __uint64_t = ::core::ffi::c_ulonglong;
pub type __darwin_intptr_t = ::core::ffi::c_long;
pub type __darwin_natural_t = ::core::ffi::c_uint;
pub type __darwin_ct_rune_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::core::ffi::c_char; 128usize],
    pub _mbstateL: ::core::ffi::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::core::mem::MaybeUninit<__mbstate_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::core::ffi::c_long;
pub type __darwin_size_t = ::core::ffi::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::core::ffi::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::core::ffi::c_int;
pub type __darwin_clock_t = ::core::ffi::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::core::ffi::c_long;
pub type __darwin_time_t = ::core::ffi::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::core::ffi::c_uint;
pub type __darwin_fsfilcnt_t = ::core::ffi::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::core::ffi::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::core::ffi::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub __arg: *mut ::core::ffi::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::core::ffi::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::core::ffi::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::core::mem::MaybeUninit<_opaque_pthread_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::core::ffi::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::core::ffi::c_uchar;
pub type u_int16_t = ::core::ffi::c_ushort;
pub type u_int32_t = ::core::ffi::c_uint;
pub type u_int64_t = ::core::ffi::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::core::ffi::c_long;
pub type uintmax_t = ::core::ffi::c_ulong;
pub type __darwin_nl_item = ::core::ffi::c_int;
pub type __darwin_wctrans_t = ::core::ffi::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::core::ffi::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_exception_state() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_exception_state> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_arm_exception_state))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_exception_state))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__exception) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__exception)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fsr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__fsr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__far) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state),
            "::",
            stringify!(__far)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_exception_state64() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_exception_state64> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_arm_exception_state64))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_exception_state64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__far) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__far)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__esr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__esr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__exception) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_exception_state64),
            "::",
            stringify!(__exception)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_thread_state() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_thread_state> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_thread_state>(),
        68usize,
        concat!("Size of: ", stringify!(__darwin_arm_thread_state))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_thread_state))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__r)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sp) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__lr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__lr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pc) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__pc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cpsr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state),
            "::",
            stringify!(__cpsr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_thread_state64() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_thread_state64> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_thread_state64>(),
        272usize,
        concat!("Size of: ", stringify!(__darwin_arm_thread_state64))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_thread_state64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fp) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__fp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__lr) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__lr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sp) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__sp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pc) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__pc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cpsr) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__cpsr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_thread_state64),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_vfp_state() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_vfp_state> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_vfp_state>(),
        260usize,
        concat!("Size of: ", stringify!(__darwin_arm_vfp_state))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_vfp_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_arm_vfp_state))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_vfp_state),
            "::",
            stringify!(__r)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fpscr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_vfp_state),
            "::",
            stringify!(__fpscr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_neon_state64() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_neon_state64> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_neon_state64>(),
        528usize,
        concat!("Size of: ", stringify!(__darwin_arm_neon_state64))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_neon_state64>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_arm_neon_state64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__v)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fpsr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__fpsr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fpcr) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state64),
            "::",
            stringify!(__fpcr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_neon_state() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_neon_state> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_neon_state>(),
        272usize,
        concat!("Size of: ", stringify!(__darwin_arm_neon_state))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_neon_state>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_arm_neon_state))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__v)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fpsr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__fpsr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fpcr) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_neon_state),
            "::",
            stringify!(__fpcr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___arm_pagein_state() {
    const UNINIT: ::core::mem::MaybeUninit<__arm_pagein_state> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__arm_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__arm_pagein_state))
    );
    assert_eq!(
        ::core::mem::align_of::<__arm_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__arm_pagein_state))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[test]
fn bindgen_test_layout___arm_legacy_debug_state() {
    const UNINIT: ::core::mem::MaybeUninit<__arm_legacy_debug_state> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__arm_legacy_debug_state>(),
        256usize,
        concat!("Size of: ", stringify!(__arm_legacy_debug_state))
    );
    assert_eq!(
        ::core::mem::align_of::<__arm_legacy_debug_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__arm_legacy_debug_state))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__arm_legacy_debug_state),
            "::",
            stringify!(__wcr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_debug_state32() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_debug_state32> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_debug_state32>(),
        264usize,
        concat!("Size of: ", stringify!(__darwin_arm_debug_state32))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_debug_state32>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_debug_state32))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__wcr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__mdscr_el1) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state32),
            "::",
            stringify!(__mdscr_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_arm_debug_state64() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_debug_state64> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_debug_state64>(),
        520usize,
        concat!("Size of: ", stringify!(__darwin_arm_debug_state64))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_debug_state64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__bvr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__bvr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__bcr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__bcr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wvr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__wvr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__wcr) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__wcr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__mdscr_el1) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_debug_state64),
            "::",
            stringify!(__mdscr_el1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_arm_cpmu_state64() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_arm_cpmu_state64> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_arm_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_arm_cpmu_state64))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_arm_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_arm_cpmu_state64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_arm_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_mcontext32> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_mcontext32>(),
        340usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_mcontext64> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_mcontext64>(),
        816usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_mcontext64>(),
        16usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__ns) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ns)
        )
    );
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::core::ffi::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_sigaltstack> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::core::ffi::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    const UNINIT: ::core::mem::MaybeUninit<__darwin_ucontext> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::core::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_onstack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_mcsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::core::ffi::c_int,
    pub sival_ptr: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::core::mem::MaybeUninit<sigval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::core::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::core::ffi::c_int,
    pub sigev_signo: ::core::ffi::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::core::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::core::mem::MaybeUninit<sigevent> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::core::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sigev_notify_function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sigev_notify_attributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::core::ffi::c_int,
    pub si_errno: ::core::ffi::c_int,
    pub si_code: ::core::ffi::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::core::ffi::c_int,
    pub si_addr: *mut ::core::ffi::c_void,
    pub si_value: sigval,
    pub si_band: ::core::ffi::c_long,
    pub __pad: [::core::ffi::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    const UNINIT: ::core::mem::MaybeUninit<__siginfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::core::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>,
    pub __sa_sigaction: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: ::core::ffi::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::core::ffi::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    const UNINIT: ::core::mem::MaybeUninit<__sigaction_u> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::core::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::core::ffi::c_void,
            arg2: ::core::ffi::c_int,
            arg3: ::core::ffi::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::core::ffi::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    const UNINIT: ::core::mem::MaybeUninit<__sigaction> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::core::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_tramp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::core::mem::MaybeUninit<sigaction> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::core::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sigaction_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
pub type sig_t = ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>,
    pub sv_mask: ::core::ffi::c_int,
    pub sv_flags: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    const UNINIT: ::core::mem::MaybeUninit<sigvec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::core::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sv_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sv_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sv_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::core::ffi::c_char,
    pub ss_onstack: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::core::mem::MaybeUninit<sigstack> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::core::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn signal(
        arg1: ::core::ffi::c_int,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>,
    ) -> ::core::option::Option<
        unsafe extern "C" fn(
            arg1: ::core::ffi::c_int,
            arg2: ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>,
        ),
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::core::mem::MaybeUninit<timeval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::core::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::core::ffi::c_long,
    pub ru_ixrss: ::core::ffi::c_long,
    pub ru_idrss: ::core::ffi::c_long,
    pub ru_isrss: ::core::ffi::c_long,
    pub ru_minflt: ::core::ffi::c_long,
    pub ru_majflt: ::core::ffi::c_long,
    pub ru_nswap: ::core::ffi::c_long,
    pub ru_inblock: ::core::ffi::c_long,
    pub ru_oublock: ::core::ffi::c_long,
    pub ru_msgsnd: ::core::ffi::c_long,
    pub ru_msgrcv: ::core::ffi::c_long,
    pub ru_nsignals: ::core::ffi::c_long,
    pub ru_nvcsw: ::core::ffi::c_long,
    pub ru_nivcsw: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    const UNINIT: ::core::mem::MaybeUninit<rusage> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::core::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    const UNINIT: ::core::mem::MaybeUninit<rusage_info_v0> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::core::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    const UNINIT: ::core::mem::MaybeUninit<rusage_info_v1> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::core::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    const UNINIT: ::core::mem::MaybeUninit<rusage_info_v2> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::core::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    const UNINIT: ::core::mem::MaybeUninit<rusage_info_v3> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::core::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    const UNINIT: ::core::mem::MaybeUninit<rusage_info_v4> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::core::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_runnable_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v5() {
    const UNINIT: ::core::mem::MaybeUninit<rusage_info_v5> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rusage_info_v5>(),
        304usize,
        concat!("Size of: ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        ::core::mem::align_of::<rusage_info_v5>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
#[test]
fn bindgen_test_layout_rusage_info_v6() {
    const UNINIT: ::core::mem::MaybeUninit<rusage_info_v6> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rusage_info_v6>(),
        464usize,
        concat!("Size of: ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        ::core::mem::align_of::<rusage_info_v6>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v6))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_user_time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_system_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pkg_idle_wkups) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_interrupt_wkups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pageins) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_wired_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_resident_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_phys_footprint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_start_abstime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_proc_exit_abstime) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_user_time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_system_time) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pkg_idle_wkups) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_interrupt_wkups) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_pageins) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_child_elapsed_abstime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_bytesread) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_diskio_byteswritten) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_default) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_maintenance) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_background) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_utility) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_legacy) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_initiated) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_cpu_time_qos_user_interactive) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_billed_system_time) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_serviced_system_time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_logical_writes) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_lifetime_max_phys_footprint) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_instructions) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_cycles) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_billed_energy) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_serviced_energy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).ri_interval_max_phys_footprint) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_runnable_time) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_flags) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_user_ptime) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_user_ptime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_system_ptime) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_system_ptime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pinstructions) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pinstructions)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_pcycles) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_pcycles)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_energy_nj) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_energy_nj)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_penergy_nj) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_penergy_nj)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ri_reserved) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v6),
            "::",
            stringify!(ri_reserved)
        )
    );
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    const UNINIT: ::core::mem::MaybeUninit<rlimit> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::core::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    const UNINIT: ::core::mem::MaybeUninit<proc_rlimit_control_wakeupmon> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::core::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wm_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).wm_rate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(arg1: ::core::ffi::c_int, arg2: id_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getiopolicy_np(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int)
        -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::core::ffi::c_int, arg2: *mut rlimit) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::core::ffi::c_int, arg2: *mut rusage) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::core::ffi::c_int,
        arg2: id_t,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::core::ffi::c_int, arg2: *const rlimit) -> ::core::ffi::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[test]
fn bindgen_test_layout__OSUnalignedU16() {
    const UNINIT: ::core::mem::MaybeUninit<_OSUnalignedU16> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_OSUnalignedU16>(),
        2usize,
        concat!("Size of: ", stringify!(_OSUnalignedU16))
    );
    assert_eq!(
        ::core::mem::align_of::<_OSUnalignedU16>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU16))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU16),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[test]
fn bindgen_test_layout__OSUnalignedU32() {
    const UNINIT: ::core::mem::MaybeUninit<_OSUnalignedU32> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_OSUnalignedU32>(),
        4usize,
        concat!("Size of: ", stringify!(_OSUnalignedU32))
    );
    assert_eq!(
        ::core::mem::align_of::<_OSUnalignedU32>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU32))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU32),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[test]
fn bindgen_test_layout__OSUnalignedU64() {
    const UNINIT: ::core::mem::MaybeUninit<_OSUnalignedU64> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_OSUnalignedU64>(),
        8usize,
        concat!("Size of: ", stringify!(_OSUnalignedU64))
    );
    assert_eq!(
        ::core::mem::align_of::<_OSUnalignedU64>(),
        1usize,
        concat!("Alignment of ", stringify!(_OSUnalignedU64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_OSUnalignedU64),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::core::ffi::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::core::ffi::c_uint,
        w_Coredump: ::core::ffi::c_uint,
        w_Retcode: ::core::ffi::c_uint,
        w_Filler: ::core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::core::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::core::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::core::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::core::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::core::ffi::c_uint,
        w_Stopsig: ::core::ffi::c_uint,
        w_Filler: ::core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::core::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::core::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::core::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    const UNINIT: ::core::mem::MaybeUninit<wait> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::core::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w_T) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).w_S) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
extern "C" {
    pub fn wait(arg1: *mut ::core::ffi::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(arg1: pid_t, arg2: *mut ::core::ffi::c_int, arg3: ::core::ffi::c_int) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::core::ffi::c_int,
        arg2: ::core::ffi::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::core::ffi::c_int,
        arg3: ::core::ffi::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::core::ffi::c_ulong) -> *mut ::core::ffi::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::core::ffi::c_int,
    pub rem: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::core::mem::MaybeUninit<div_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::core::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::core::ffi::c_long,
    pub rem: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<ldiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::core::ffi::c_longlong,
    pub rem: ::core::ffi::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<lldiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::core::ffi::c_int;
}
pub type malloc_type_id_t = ::core::ffi::c_ulonglong;
extern "C" {
    pub fn malloc_type_malloc(size: usize, type_id: malloc_type_id_t) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_free(ptr: *mut ::core::ffi::c_void, type_id: malloc_type_id_t);
}
extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::core::ffi::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_valloc(size: usize, type_id: malloc_type_id_t) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::core::ffi::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::core::ffi::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::core::ffi::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc(__size: ::core::ffi::c_ulong) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::core::ffi::c_ulong,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::core::ffi::c_ulong,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::core::ffi::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::core::ffi::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::core::ffi::c_void,
        __base: *const ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::core::ffi::c_void,
                arg2: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn div(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn labs(arg1: ::core::ffi::c_long) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::core::ffi::c_long, arg2: ::core::ffi::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::core::ffi::c_longlong, arg2: ::core::ffi::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::core::ffi::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::core::ffi::c_void,
                arg2: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn srand(arg1: ::core::ffi::c_uint);
}
extern "C" {
    pub fn strtod(arg1: *const ::core::ffi::c_char, arg2: *mut *mut ::core::ffi::c_char) -> f64;
}
extern "C" {
    pub fn strtof(arg1: *const ::core::ffi::c_char, arg2: *mut *mut ::core::ffi::c_char) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn strtold(arg1: *const ::core::ffi::c_char, arg2: *mut *mut ::core::ffi::c_char) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::core::ffi::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::core::ffi::c_char, arg2: wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::core::ffi::c_int,
        arg3: *mut ::core::ffi::c_int,
        arg4: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::core::ffi::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::core::ffi::c_int,
        arg3: *mut ::core::ffi::c_int,
        arg4: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::core::ffi::c_int,
        arg3: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *const *mut ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::core::ffi::c_uint,
        arg2: *mut ::core::ffi::c_char,
        arg3: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::core::ffi::c_long) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::core::ffi::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mrand48() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::core::ffi::c_int,
        buffer: *mut ::core::ffi::c_char,
        buflen: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn random() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::core::ffi::c_ushort) -> *mut ::core::ffi::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::core::ffi::c_char,
        __value: *const ::core::ffi::c_char,
        __overwrite: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::core::ffi::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::core::ffi::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::core::ffi::c_uchar, arg2: ::core::ffi::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::core::ffi::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::core::ffi::c_void,
        __base: *const ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::core::ffi::c_void,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::core::ffi::c_char,
        arg2: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn daemon(arg1: ::core::ffi::c_int, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::core::ffi::c_int,
        arg2: *mut ::core::ffi::c_long,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::core::ffi::c_void,
                arg2: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::core::ffi::c_void,
                arg2: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::core::ffi::c_void,
                arg2: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::core::ffi::c_void,
        __compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::core::ffi::c_void,
                arg2: *const ::core::ffi::c_void,
                arg3: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::core::ffi::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::core::ffi::c_void,
        __compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::core::ffi::c_void,
                arg2: *const ::core::ffi::c_void,
                arg3: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::core::ffi::c_uchar,
        __nel: ::core::ffi::c_int,
        __table: *const ::core::ffi::c_uchar,
        __endbyte: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::core::ffi::c_uchar,
        __nel: ::core::ffi::c_int,
        __table: *const ::core::ffi::c_uchar,
        __endbyte: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(__ptr: *mut ::core::ffi::c_void, __size: usize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::core::ffi::c_char,
        __minval: ::core::ffi::c_longlong,
        __maxval: ::core::ffi::c_longlong,
        __errstrp: *mut *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::core::ffi::c_char,
        __endptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDRect {
    pub left: ::core::ffi::c_int,
    pub right: ::core::ffi::c_int,
    pub top: ::core::ffi::c_int,
    pub bottom: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_LCDRect() {
    const UNINIT: ::core::mem::MaybeUninit<LCDRect> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<LCDRect>(),
        16usize,
        concat!("Size of: ", stringify!(LCDRect))
    );
    assert_eq!(
        ::core::mem::align_of::<LCDRect>(),
        4usize,
        concat!("Alignment of ", stringify!(LCDRect))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LCDRect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LCDRect),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LCDRect),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LCDRect),
            "::",
            stringify!(bottom)
        )
    );
}
pub const LCDBitmapDrawMode_kDrawModeCopy: LCDBitmapDrawMode = 0;
pub const LCDBitmapDrawMode_kDrawModeWhiteTransparent: LCDBitmapDrawMode = 1;
pub const LCDBitmapDrawMode_kDrawModeBlackTransparent: LCDBitmapDrawMode = 2;
pub const LCDBitmapDrawMode_kDrawModeFillWhite: LCDBitmapDrawMode = 3;
pub const LCDBitmapDrawMode_kDrawModeFillBlack: LCDBitmapDrawMode = 4;
pub const LCDBitmapDrawMode_kDrawModeXOR: LCDBitmapDrawMode = 5;
pub const LCDBitmapDrawMode_kDrawModeNXOR: LCDBitmapDrawMode = 6;
pub const LCDBitmapDrawMode_kDrawModeInverted: LCDBitmapDrawMode = 7;
pub type LCDBitmapDrawMode = ::core::ffi::c_uint;
pub const LCDBitmapFlip_kBitmapUnflipped: LCDBitmapFlip = 0;
pub const LCDBitmapFlip_kBitmapFlippedX: LCDBitmapFlip = 1;
pub const LCDBitmapFlip_kBitmapFlippedY: LCDBitmapFlip = 2;
pub const LCDBitmapFlip_kBitmapFlippedXY: LCDBitmapFlip = 3;
pub type LCDBitmapFlip = ::core::ffi::c_uint;
pub const LCDSolidColor_kColorBlack: LCDSolidColor = 0;
pub const LCDSolidColor_kColorWhite: LCDSolidColor = 1;
pub const LCDSolidColor_kColorClear: LCDSolidColor = 2;
pub const LCDSolidColor_kColorXOR: LCDSolidColor = 3;
pub type LCDSolidColor = ::core::ffi::c_uint;
pub const LCDLineCapStyle_kLineCapStyleButt: LCDLineCapStyle = 0;
pub const LCDLineCapStyle_kLineCapStyleSquare: LCDLineCapStyle = 1;
pub const LCDLineCapStyle_kLineCapStyleRound: LCDLineCapStyle = 2;
pub type LCDLineCapStyle = ::core::ffi::c_uint;
pub const LCDFontLanguage_kLCDFontLanguageEnglish: LCDFontLanguage = 0;
pub const LCDFontLanguage_kLCDFontLanguageJapanese: LCDFontLanguage = 1;
pub const LCDFontLanguage_kLCDFontLanguageUnknown: LCDFontLanguage = 2;
pub type LCDFontLanguage = ::core::ffi::c_uint;
pub const PDStringEncoding_kASCIIEncoding: PDStringEncoding = 0;
pub const PDStringEncoding_kUTF8Encoding: PDStringEncoding = 1;
pub const PDStringEncoding_k16BitLEEncoding: PDStringEncoding = 2;
pub type PDStringEncoding = ::core::ffi::c_uint;
pub type LCDPattern = [u8; 16usize];
pub type LCDColor = usize;
pub const LCDPolygonFillRule_kPolygonFillNonZero: LCDPolygonFillRule = 0;
pub const LCDPolygonFillRule_kPolygonFillEvenOdd: LCDPolygonFillRule = 1;
pub type LCDPolygonFillRule = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDBitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDBitmapTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDFont {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDFontData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDFontPage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDFontGlyph {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDVideoPlayer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_video {
    pub loadVideo: ::core::option::Option<
        unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> *mut LCDVideoPlayer,
    >,
    pub freePlayer: ::core::option::Option<unsafe extern "C" fn(p: *mut LCDVideoPlayer)>,
    pub setContext: ::core::option::Option<
        unsafe extern "C" fn(p: *mut LCDVideoPlayer, context: *mut LCDBitmap) -> ::core::ffi::c_int,
    >,
    pub useScreenContext: ::core::option::Option<unsafe extern "C" fn(p: *mut LCDVideoPlayer)>,
    pub renderFrame: ::core::option::Option<
        unsafe extern "C" fn(p: *mut LCDVideoPlayer, n: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub getError: ::core::option::Option<
        unsafe extern "C" fn(p: *mut LCDVideoPlayer) -> *const ::core::ffi::c_char,
    >,
    pub getInfo: ::core::option::Option<
        unsafe extern "C" fn(
            p: *mut LCDVideoPlayer,
            outWidth: *mut ::core::ffi::c_int,
            outHeight: *mut ::core::ffi::c_int,
            outFrameRate: *mut f32,
            outFrameCount: *mut ::core::ffi::c_int,
            outCurrentFrame: *mut ::core::ffi::c_int,
        ),
    >,
    pub getContext:
        ::core::option::Option<unsafe extern "C" fn(p: *mut LCDVideoPlayer) -> *mut LCDBitmap>,
}
#[test]
fn bindgen_test_layout_playdate_video() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_video> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_video>(),
        64usize,
        concat!("Size of: ", stringify!(playdate_video))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_video>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_video))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadVideo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_video),
            "::",
            stringify!(loadVideo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freePlayer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_video),
            "::",
            stringify!(freePlayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setContext) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_video),
            "::",
            stringify!(setContext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).useScreenContext) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_video),
            "::",
            stringify!(useScreenContext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).renderFrame) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_video),
            "::",
            stringify!(renderFrame)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getError) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_video),
            "::",
            stringify!(getError)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_video),
            "::",
            stringify!(getInfo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getContext) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_video),
            "::",
            stringify!(getContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_graphics {
    pub video: *const playdate_video,
    pub clear: ::core::option::Option<unsafe extern "C" fn(color: LCDColor)>,
    pub setBackgroundColor: ::core::option::Option<unsafe extern "C" fn(color: LCDSolidColor)>,
    pub setStencil: ::core::option::Option<unsafe extern "C" fn(stencil: *mut LCDBitmap)>,
    pub setDrawMode: ::core::option::Option<unsafe extern "C" fn(mode: LCDBitmapDrawMode)>,
    pub setDrawOffset: ::core::option::Option<
        unsafe extern "C" fn(dx: ::core::ffi::c_int, dy: ::core::ffi::c_int),
    >,
    pub setClipRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub clearClipRect: ::core::option::Option<unsafe extern "C" fn()>,
    pub setLineCapStyle: ::core::option::Option<unsafe extern "C" fn(endCapStyle: LCDLineCapStyle)>,
    pub setFont: ::core::option::Option<unsafe extern "C" fn(font: *mut LCDFont)>,
    pub setTextTracking: ::core::option::Option<unsafe extern "C" fn(tracking: ::core::ffi::c_int)>,
    pub pushContext: ::core::option::Option<unsafe extern "C" fn(target: *mut LCDBitmap)>,
    pub popContext: ::core::option::Option<unsafe extern "C" fn()>,
    pub drawBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            flip: LCDBitmapFlip,
        ),
    >,
    pub tileBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            flip: LCDBitmapFlip,
        ),
    >,
    pub drawLine: ::core::option::Option<
        unsafe extern "C" fn(
            x1: ::core::ffi::c_int,
            y1: ::core::ffi::c_int,
            x2: ::core::ffi::c_int,
            y2: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            color: LCDColor,
        ),
    >,
    pub fillTriangle: ::core::option::Option<
        unsafe extern "C" fn(
            x1: ::core::ffi::c_int,
            y1: ::core::ffi::c_int,
            x2: ::core::ffi::c_int,
            y2: ::core::ffi::c_int,
            x3: ::core::ffi::c_int,
            y3: ::core::ffi::c_int,
            color: LCDColor,
        ),
    >,
    pub drawRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            color: LCDColor,
        ),
    >,
    pub fillRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            color: LCDColor,
        ),
    >,
    pub drawEllipse: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            lineWidth: ::core::ffi::c_int,
            startAngle: f32,
            endAngle: f32,
            color: LCDColor,
        ),
    >,
    pub fillEllipse: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            startAngle: f32,
            endAngle: f32,
            color: LCDColor,
        ),
    >,
    pub drawScaledBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            xscale: f32,
            yscale: f32,
        ),
    >,
    pub drawText: ::core::option::Option<
        unsafe extern "C" fn(
            text: *const ::core::ffi::c_void,
            len: usize,
            encoding: PDStringEncoding,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub newBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            bgcolor: LCDColor,
        ) -> *mut LCDBitmap,
    >,
    pub freeBitmap: ::core::option::Option<unsafe extern "C" fn(arg1: *mut LCDBitmap)>,
    pub loadBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            outerr: *mut *const ::core::ffi::c_char,
        ) -> *mut LCDBitmap,
    >,
    pub copyBitmap:
        ::core::option::Option<unsafe extern "C" fn(bitmap: *mut LCDBitmap) -> *mut LCDBitmap>,
    pub loadIntoBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            bitmap: *mut LCDBitmap,
            outerr: *mut *const ::core::ffi::c_char,
        ),
    >,
    pub getBitmapData: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            width: *mut ::core::ffi::c_int,
            height: *mut ::core::ffi::c_int,
            rowbytes: *mut ::core::ffi::c_int,
            mask: *mut *mut u8,
            data: *mut *mut u8,
        ),
    >,
    pub clearBitmap:
        ::core::option::Option<unsafe extern "C" fn(bitmap: *mut LCDBitmap, bgcolor: LCDColor)>,
    pub rotatedBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            rotation: f32,
            xscale: f32,
            yscale: f32,
            allocedSize: *mut ::core::ffi::c_int,
        ) -> *mut LCDBitmap,
    >,
    pub newBitmapTable: ::core::option::Option<
        unsafe extern "C" fn(
            count: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ) -> *mut LCDBitmapTable,
    >,
    pub freeBitmapTable: ::core::option::Option<unsafe extern "C" fn(table: *mut LCDBitmapTable)>,
    pub loadBitmapTable: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            outerr: *mut *const ::core::ffi::c_char,
        ) -> *mut LCDBitmapTable,
    >,
    pub loadIntoBitmapTable: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            table: *mut LCDBitmapTable,
            outerr: *mut *const ::core::ffi::c_char,
        ),
    >,
    pub getTableBitmap: ::core::option::Option<
        unsafe extern "C" fn(table: *mut LCDBitmapTable, idx: ::core::ffi::c_int) -> *mut LCDBitmap,
    >,
    pub loadFont: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            outErr: *mut *const ::core::ffi::c_char,
        ) -> *mut LCDFont,
    >,
    pub getFontPage: ::core::option::Option<
        unsafe extern "C" fn(font: *mut LCDFont, c: u32) -> *mut LCDFontPage,
    >,
    pub getPageGlyph: ::core::option::Option<
        unsafe extern "C" fn(
            page: *mut LCDFontPage,
            c: u32,
            bitmap: *mut *mut LCDBitmap,
            advance: *mut ::core::ffi::c_int,
        ) -> *mut LCDFontGlyph,
    >,
    pub getGlyphKerning: ::core::option::Option<
        unsafe extern "C" fn(
            glyph: *mut LCDFontGlyph,
            glyphcode: u32,
            nextcode: u32,
        ) -> ::core::ffi::c_int,
    >,
    pub getTextWidth: ::core::option::Option<
        unsafe extern "C" fn(
            font: *mut LCDFont,
            text: *const ::core::ffi::c_void,
            len: usize,
            encoding: PDStringEncoding,
            tracking: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub getFrame: ::core::option::Option<unsafe extern "C" fn() -> *mut u8>,
    pub getDisplayFrame: ::core::option::Option<unsafe extern "C" fn() -> *mut u8>,
    pub getDebugBitmap: ::core::option::Option<unsafe extern "C" fn() -> *mut LCDBitmap>,
    pub copyFrameBufferBitmap: ::core::option::Option<unsafe extern "C" fn() -> *mut LCDBitmap>,
    pub markUpdatedRows: ::core::option::Option<
        unsafe extern "C" fn(start: ::core::ffi::c_int, end: ::core::ffi::c_int),
    >,
    pub display: ::core::option::Option<unsafe extern "C" fn()>,
    pub setColorToPattern: ::core::option::Option<
        unsafe extern "C" fn(
            color: *mut LCDColor,
            bitmap: *mut LCDBitmap,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
        ),
    >,
    pub checkMaskCollision: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap1: *mut LCDBitmap,
            x1: ::core::ffi::c_int,
            y1: ::core::ffi::c_int,
            flip1: LCDBitmapFlip,
            bitmap2: *mut LCDBitmap,
            x2: ::core::ffi::c_int,
            y2: ::core::ffi::c_int,
            flip2: LCDBitmapFlip,
            rect: LCDRect,
        ) -> ::core::ffi::c_int,
    >,
    pub setScreenClipRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub fillPolygon: ::core::option::Option<
        unsafe extern "C" fn(
            nPoints: ::core::ffi::c_int,
            coords: *mut ::core::ffi::c_int,
            color: LCDColor,
            fillrule: LCDPolygonFillRule,
        ),
    >,
    pub getFontHeight: ::core::option::Option<unsafe extern "C" fn(font: *mut LCDFont) -> u8>,
    pub getDisplayBufferBitmap: ::core::option::Option<unsafe extern "C" fn() -> *mut LCDBitmap>,
    pub drawRotatedBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            rotation: f32,
            centerx: f32,
            centery: f32,
            xscale: f32,
            yscale: f32,
        ),
    >,
    pub setTextLeading:
        ::core::option::Option<unsafe extern "C" fn(lineHeightAdustment: ::core::ffi::c_int)>,
    pub setBitmapMask: ::core::option::Option<
        unsafe extern "C" fn(bitmap: *mut LCDBitmap, mask: *mut LCDBitmap) -> ::core::ffi::c_int,
    >,
    pub getBitmapMask:
        ::core::option::Option<unsafe extern "C" fn(bitmap: *mut LCDBitmap) -> *mut LCDBitmap>,
    pub setStencilImage: ::core::option::Option<
        unsafe extern "C" fn(stencil: *mut LCDBitmap, tile: ::core::ffi::c_int),
    >,
    pub makeFontFromData: ::core::option::Option<
        unsafe extern "C" fn(data: *mut LCDFontData, wide: ::core::ffi::c_int) -> *mut LCDFont,
    >,
    pub getTextTracking: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
}
#[test]
fn bindgen_test_layout_playdate_graphics() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_graphics> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_graphics>(),
        480usize,
        concat!("Size of: ", stringify!(playdate_graphics))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_graphics>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_graphics))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).video) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(video)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clear) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setBackgroundColor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setBackgroundColor)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setStencil) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setStencil)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDrawMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setDrawMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDrawOffset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setDrawOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setClipRect) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setClipRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearClipRect) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(clearClipRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLineCapStyle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setLineCapStyle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFont) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setFont)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTextTracking) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setTextTracking)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushContext) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(pushContext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).popContext) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(popContext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawBitmap) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(drawBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tileBitmap) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(tileBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawLine) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(drawLine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fillTriangle) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(fillTriangle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawRect) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(drawRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fillRect) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(fillRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawEllipse) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(drawEllipse)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fillEllipse) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(fillEllipse)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawScaledBitmap) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(drawScaledBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawText) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(drawText)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newBitmap) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(newBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeBitmap) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(freeBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadBitmap) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(loadBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).copyBitmap) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(copyBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadIntoBitmap) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(loadIntoBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getBitmapData) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getBitmapData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearBitmap) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(clearBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rotatedBitmap) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(rotatedBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newBitmapTable) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(newBitmapTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeBitmapTable) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(freeBitmapTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadBitmapTable) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(loadBitmapTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadIntoBitmapTable) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(loadIntoBitmapTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTableBitmap) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getTableBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadFont) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(loadFont)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getFontPage) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getFontPage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getPageGlyph) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getPageGlyph)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getGlyphKerning) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getGlyphKerning)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTextWidth) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getTextWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getFrame) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getFrame)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getDisplayFrame) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getDisplayFrame)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getDebugBitmap) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getDebugBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).copyFrameBufferBitmap) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(copyFrameBufferBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).markUpdatedRows) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(markUpdatedRows)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).display) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setColorToPattern) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setColorToPattern)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checkMaskCollision) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(checkMaskCollision)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setScreenClipRect) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setScreenClipRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fillPolygon) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(fillPolygon)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getFontHeight) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getFontHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getDisplayBufferBitmap) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getDisplayBufferBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawRotatedBitmap) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(drawRotatedBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTextLeading) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setTextLeading)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setBitmapMask) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setBitmapMask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getBitmapMask) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getBitmapMask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setStencilImage) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(setStencilImage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).makeFontFromData) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(makeFontFromData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTextTracking) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_graphics),
            "::",
            stringify!(getTextTracking)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub const PDButtons_kButtonLeft: PDButtons = 1;
pub const PDButtons_kButtonRight: PDButtons = 2;
pub const PDButtons_kButtonUp: PDButtons = 4;
pub const PDButtons_kButtonDown: PDButtons = 8;
pub const PDButtons_kButtonB: PDButtons = 16;
pub const PDButtons_kButtonA: PDButtons = 32;
pub type PDButtons = ::core::ffi::c_uint;
pub const PDLanguage_kPDLanguageEnglish: PDLanguage = 0;
pub const PDLanguage_kPDLanguageJapanese: PDLanguage = 1;
pub const PDLanguage_kPDLanguageUnknown: PDLanguage = 2;
pub type PDLanguage = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDDateTime {
    pub year: u16,
    pub month: u8,
    pub day: u8,
    pub weekday: u8,
    pub hour: u8,
    pub minute: u8,
    pub second: u8,
}
#[test]
fn bindgen_test_layout_PDDateTime() {
    const UNINIT: ::core::mem::MaybeUninit<PDDateTime> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PDDateTime>(),
        8usize,
        concat!("Size of: ", stringify!(PDDateTime))
    );
    assert_eq!(
        ::core::mem::align_of::<PDDateTime>(),
        2usize,
        concat!("Alignment of ", stringify!(PDDateTime))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDDateTime),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PDDateTime),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(PDDateTime),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).weekday) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PDDateTime),
            "::",
            stringify!(weekday)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(PDDateTime),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(PDDateTime),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(PDDateTime),
            "::",
            stringify!(second)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDMenuItem {
    _unused: [u8; 0],
}
pub const PDPeripherals_kNone: PDPeripherals = 0;
pub const PDPeripherals_kAccelerometer: PDPeripherals = 1;
pub const PDPeripherals_kAllPeripherals: PDPeripherals = 65535;
pub type PDPeripherals = ::core::ffi::c_uint;
pub type PDCallbackFunction = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
>;
pub type PDMenuItemCallbackFunction =
    ::core::option::Option<unsafe extern "C" fn(userdata: *mut ::core::ffi::c_void)>;
pub type PDButtonCallbackFunction = ::core::option::Option<
    unsafe extern "C" fn(
        button: PDButtons,
        down: ::core::ffi::c_int,
        when: u32,
        userdata: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sys {
    pub realloc: ::core::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::core::ffi::c_void,
            size: usize,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub formatString: ::core::option::Option<
        unsafe extern "C" fn(
            ret: *mut *mut ::core::ffi::c_char,
            fmt: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int,
    >,
    pub logToConsole:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub error: ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub getLanguage: ::core::option::Option<unsafe extern "C" fn() -> PDLanguage>,
    pub getCurrentTimeMilliseconds:
        ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_uint>,
    pub getSecondsSinceEpoch: ::core::option::Option<
        unsafe extern "C" fn(milliseconds: *mut ::core::ffi::c_uint) -> ::core::ffi::c_uint,
    >,
    pub drawFPS:
        ::core::option::Option<unsafe extern "C" fn(x: ::core::ffi::c_int, y: ::core::ffi::c_int)>,
    pub setUpdateCallback: ::core::option::Option<
        unsafe extern "C" fn(update: PDCallbackFunction, userdata: *mut ::core::ffi::c_void),
    >,
    pub getButtonState: ::core::option::Option<
        unsafe extern "C" fn(
            current: *mut PDButtons,
            pushed: *mut PDButtons,
            released: *mut PDButtons,
        ),
    >,
    pub setPeripheralsEnabled: ::core::option::Option<unsafe extern "C" fn(mask: PDPeripherals)>,
    pub getAccelerometer: ::core::option::Option<
        unsafe extern "C" fn(outx: *mut f32, outy: *mut f32, outz: *mut f32),
    >,
    pub getCrankChange: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub getCrankAngle: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub isCrankDocked: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub setCrankSoundsDisabled: ::core::option::Option<
        unsafe extern "C" fn(flag: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub getFlipped: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub setAutoLockDisabled:
        ::core::option::Option<unsafe extern "C" fn(disable: ::core::ffi::c_int)>,
    pub setMenuImage: ::core::option::Option<
        unsafe extern "C" fn(bitmap: *mut LCDBitmap, xOffset: ::core::ffi::c_int),
    >,
    pub addMenuItem: ::core::option::Option<
        unsafe extern "C" fn(
            title: *const ::core::ffi::c_char,
            callback: PDMenuItemCallbackFunction,
            userdata: *mut ::core::ffi::c_void,
        ) -> *mut PDMenuItem,
    >,
    pub addCheckmarkMenuItem: ::core::option::Option<
        unsafe extern "C" fn(
            title: *const ::core::ffi::c_char,
            value: ::core::ffi::c_int,
            callback: PDMenuItemCallbackFunction,
            userdata: *mut ::core::ffi::c_void,
        ) -> *mut PDMenuItem,
    >,
    pub addOptionsMenuItem: ::core::option::Option<
        unsafe extern "C" fn(
            title: *const ::core::ffi::c_char,
            optionTitles: *mut *const ::core::ffi::c_char,
            optionsCount: ::core::ffi::c_int,
            f: PDMenuItemCallbackFunction,
            userdata: *mut ::core::ffi::c_void,
        ) -> *mut PDMenuItem,
    >,
    pub removeAllMenuItems: ::core::option::Option<unsafe extern "C" fn()>,
    pub removeMenuItem: ::core::option::Option<unsafe extern "C" fn(menuItem: *mut PDMenuItem)>,
    pub getMenuItemValue: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem) -> ::core::ffi::c_int,
    >,
    pub setMenuItemValue: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem, value: ::core::ffi::c_int),
    >,
    pub getMenuItemTitle: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem) -> *const ::core::ffi::c_char,
    >,
    pub setMenuItemTitle: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem, title: *const ::core::ffi::c_char),
    >,
    pub getMenuItemUserdata: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem) -> *mut ::core::ffi::c_void,
    >,
    pub setMenuItemUserdata: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem, ud: *mut ::core::ffi::c_void),
    >,
    pub getReduceFlashing: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub getElapsedTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub resetElapsedTime: ::core::option::Option<unsafe extern "C" fn()>,
    pub getBatteryPercentage: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub getBatteryVoltage: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub getTimezoneOffset: ::core::option::Option<unsafe extern "C" fn() -> i32>,
    pub shouldDisplay24HourTime:
        ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub convertEpochToDateTime:
        ::core::option::Option<unsafe extern "C" fn(epoch: u32, datetime: *mut PDDateTime)>,
    pub convertDateTimeToEpoch:
        ::core::option::Option<unsafe extern "C" fn(datetime: *mut PDDateTime) -> u32>,
    pub clearICache: ::core::option::Option<unsafe extern "C" fn()>,
    pub setButtonCallback: ::core::option::Option<
        unsafe extern "C" fn(
            cb: PDButtonCallbackFunction,
            buttonud: *mut ::core::ffi::c_void,
            queuesize: ::core::ffi::c_int,
        ),
    >,
    pub setSerialMessageCallback: ::core::option::Option<
        unsafe extern "C" fn(
            callback: ::core::option::Option<unsafe extern "C" fn(data: *const ::core::ffi::c_char)>,
        ),
    >,
    pub vaFormatString: ::core::option::Option<
        unsafe extern "C" fn(
            outstr: *mut *mut ::core::ffi::c_char,
            fmt: *const ::core::ffi::c_char,
            args: va_list,
        ) -> ::core::ffi::c_int,
    >,
    pub parseString: ::core::option::Option<
        unsafe extern "C" fn(
            str_: *const ::core::ffi::c_char,
            format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sys() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sys> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sys>(),
        352usize,
        concat!("Size of: ", stringify!(playdate_sys))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sys>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sys))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).realloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).formatString) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(formatString)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).logToConsole) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(logToConsole)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getLanguage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getLanguage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getCurrentTimeMilliseconds) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getCurrentTimeMilliseconds)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getSecondsSinceEpoch) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getSecondsSinceEpoch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawFPS) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(drawFPS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setUpdateCallback) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setUpdateCallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getButtonState) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getButtonState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setPeripheralsEnabled) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setPeripheralsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getAccelerometer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getAccelerometer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getCrankChange) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getCrankChange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getCrankAngle) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getCrankAngle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isCrankDocked) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(isCrankDocked)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setCrankSoundsDisabled) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setCrankSoundsDisabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getFlipped) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getFlipped)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setAutoLockDisabled) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setAutoLockDisabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMenuImage) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setMenuImage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addMenuItem) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(addMenuItem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addCheckmarkMenuItem) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(addCheckmarkMenuItem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addOptionsMenuItem) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(addOptionsMenuItem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeAllMenuItems) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(removeAllMenuItems)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeMenuItem) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(removeMenuItem)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getMenuItemValue) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getMenuItemValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMenuItemValue) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setMenuItemValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getMenuItemTitle) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getMenuItemTitle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMenuItemTitle) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setMenuItemTitle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getMenuItemUserdata) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getMenuItemUserdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMenuItemUserdata) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setMenuItemUserdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getReduceFlashing) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getReduceFlashing)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getElapsedTime) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getElapsedTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).resetElapsedTime) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(resetElapsedTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getBatteryPercentage) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getBatteryPercentage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getBatteryVoltage) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getBatteryVoltage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTimezoneOffset) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(getTimezoneOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).shouldDisplay24HourTime) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(shouldDisplay24HourTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).convertEpochToDateTime) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(convertEpochToDateTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).convertDateTimeToEpoch) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(convertDateTimeToEpoch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearICache) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(clearICache)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setButtonCallback) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setButtonCallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setSerialMessageCallback) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(setSerialMessageCallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).vaFormatString) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(vaFormatString)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).parseString) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sys),
            "::",
            stringify!(parseString)
        )
    );
}
pub type lua_State = *mut ::core::ffi::c_void;
pub type lua_CFunction =
    ::core::option::Option<unsafe extern "C" fn(L: *mut lua_State) -> ::core::ffi::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LuaUDObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDSprite {
    _unused: [u8; 0],
}
pub const l_valtype_kInt: l_valtype = 0;
pub const l_valtype_kFloat: l_valtype = 1;
pub const l_valtype_kStr: l_valtype = 2;
pub type l_valtype = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_reg {
    pub name: *const ::core::ffi::c_char,
    pub func: lua_CFunction,
}
#[test]
fn bindgen_test_layout_lua_reg() {
    const UNINIT: ::core::mem::MaybeUninit<lua_reg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lua_reg>(),
        16usize,
        concat!("Size of: ", stringify!(lua_reg))
    );
    assert_eq!(
        ::core::mem::align_of::<lua_reg>(),
        8usize,
        concat!("Alignment of ", stringify!(lua_reg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_reg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_reg),
            "::",
            stringify!(func)
        )
    );
}
pub const LuaType_kTypeNil: LuaType = 0;
pub const LuaType_kTypeBool: LuaType = 1;
pub const LuaType_kTypeInt: LuaType = 2;
pub const LuaType_kTypeFloat: LuaType = 3;
pub const LuaType_kTypeString: LuaType = 4;
pub const LuaType_kTypeTable: LuaType = 5;
pub const LuaType_kTypeFunction: LuaType = 6;
pub const LuaType_kTypeThread: LuaType = 7;
pub const LuaType_kTypeObject: LuaType = 8;
pub type LuaType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lua_val {
    pub name: *const ::core::ffi::c_char,
    pub type_: l_valtype,
    pub v: lua_val__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lua_val__bindgen_ty_1 {
    pub intval: ::core::ffi::c_uint,
    pub floatval: f32,
    pub strval: *const ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_lua_val__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<lua_val__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lua_val__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(lua_val__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<lua_val__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(lua_val__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).intval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_val__bindgen_ty_1),
            "::",
            stringify!(intval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).floatval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_val__bindgen_ty_1),
            "::",
            stringify!(floatval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).strval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_val__bindgen_ty_1),
            "::",
            stringify!(strval)
        )
    );
}
#[test]
fn bindgen_test_layout_lua_val() {
    const UNINIT: ::core::mem::MaybeUninit<lua_val> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lua_val>(),
        24usize,
        concat!("Size of: ", stringify!(lua_val))
    );
    assert_eq!(
        ::core::mem::align_of::<lua_val>(),
        8usize,
        concat!("Alignment of ", stringify!(lua_val))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_val),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_val),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_val),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_lua {
    pub addFunction: ::core::option::Option<
        unsafe extern "C" fn(
            f: lua_CFunction,
            name: *const ::core::ffi::c_char,
            outErr: *mut *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub registerClass: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            reg: *const lua_reg,
            vals: *const lua_val,
            isstatic: ::core::ffi::c_int,
            outErr: *mut *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pushFunction: ::core::option::Option<unsafe extern "C" fn(f: lua_CFunction)>,
    pub indexMetatable: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub stop: ::core::option::Option<unsafe extern "C" fn()>,
    pub start: ::core::option::Option<unsafe extern "C" fn()>,
    pub getArgCount: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub getArgType: ::core::option::Option<
        unsafe extern "C" fn(
            pos: ::core::ffi::c_int,
            outClass: *mut *const ::core::ffi::c_char,
        ) -> LuaType,
    >,
    pub argIsNil:
        ::core::option::Option<unsafe extern "C" fn(pos: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub getArgBool:
        ::core::option::Option<unsafe extern "C" fn(pos: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub getArgInt:
        ::core::option::Option<unsafe extern "C" fn(pos: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub getArgFloat: ::core::option::Option<unsafe extern "C" fn(pos: ::core::ffi::c_int) -> f32>,
    pub getArgString: ::core::option::Option<
        unsafe extern "C" fn(pos: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub getArgBytes: ::core::option::Option<
        unsafe extern "C" fn(
            pos: ::core::ffi::c_int,
            outlen: *mut usize,
        ) -> *const ::core::ffi::c_char,
    >,
    pub getArgObject: ::core::option::Option<
        unsafe extern "C" fn(
            pos: ::core::ffi::c_int,
            type_: *mut ::core::ffi::c_char,
            outud: *mut *mut LuaUDObject,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub getBitmap:
        ::core::option::Option<unsafe extern "C" fn(pos: ::core::ffi::c_int) -> *mut LCDBitmap>,
    pub getSprite:
        ::core::option::Option<unsafe extern "C" fn(pos: ::core::ffi::c_int) -> *mut LCDSprite>,
    pub pushNil: ::core::option::Option<unsafe extern "C" fn()>,
    pub pushBool: ::core::option::Option<unsafe extern "C" fn(val: ::core::ffi::c_int)>,
    pub pushInt: ::core::option::Option<unsafe extern "C" fn(val: ::core::ffi::c_int)>,
    pub pushFloat: ::core::option::Option<unsafe extern "C" fn(val: f32)>,
    pub pushString: ::core::option::Option<unsafe extern "C" fn(str_: *const ::core::ffi::c_char)>,
    pub pushBytes:
        ::core::option::Option<unsafe extern "C" fn(str_: *const ::core::ffi::c_char, len: usize)>,
    pub pushBitmap: ::core::option::Option<unsafe extern "C" fn(bitmap: *mut LCDBitmap)>,
    pub pushSprite: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub pushObject: ::core::option::Option<
        unsafe extern "C" fn(
            obj: *mut ::core::ffi::c_void,
            type_: *mut ::core::ffi::c_char,
            nValues: ::core::ffi::c_int,
        ) -> *mut LuaUDObject,
    >,
    pub retainObject:
        ::core::option::Option<unsafe extern "C" fn(obj: *mut LuaUDObject) -> *mut LuaUDObject>,
    pub releaseObject: ::core::option::Option<unsafe extern "C" fn(obj: *mut LuaUDObject)>,
    pub setUserValue: ::core::option::Option<
        unsafe extern "C" fn(obj: *mut LuaUDObject, slot: ::core::ffi::c_uint),
    >,
    pub getUserValue: ::core::option::Option<
        unsafe extern "C" fn(
            obj: *mut LuaUDObject,
            slot: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub callFunction_deprecated: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char, nargs: ::core::ffi::c_int),
    >,
    pub callFunction: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            nargs: ::core::ffi::c_int,
            outerr: *mut *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_playdate_lua() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_lua> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_lua>(),
        256usize,
        concat!("Size of: ", stringify!(playdate_lua))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_lua>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_lua))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addFunction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(addFunction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).registerClass) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(registerClass)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushFunction) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushFunction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).indexMetatable) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(indexMetatable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getArgCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getArgCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getArgType) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getArgType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).argIsNil) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(argIsNil)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getArgBool) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getArgBool)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getArgInt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getArgInt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getArgFloat) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getArgFloat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getArgString) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getArgString)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getArgBytes) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getArgBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getArgObject) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getArgObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getBitmap) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getSprite) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getSprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushNil) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushNil)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushBool) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushBool)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushInt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushInt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushFloat) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushFloat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushString) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushString)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushBytes) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushBytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushBitmap) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushBitmap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushSprite) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushSprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pushObject) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(pushObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).retainObject) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(retainObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).releaseObject) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(releaseObject)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setUserValue) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(setUserValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getUserValue) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(getUserValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).callFunction_deprecated) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(callFunction_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).callFunction) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_lua),
            "::",
            stringify!(callFunction)
        )
    );
}
extern "C" {
    pub fn memchr(
        __s: *const ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::core::ffi::c_void,
        __s2: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __len: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __len: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::core::ffi::c_char,
        __charset: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::core::ffi::c_char,
        __charset: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::core::ffi::c_char,
        __c: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::core::ffi::c_char,
        __charset: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::core::ffi::c_char,
        __little: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::core::ffi::c_char,
        __sep: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::core::ffi::c_char,
        __sep: *const ::core::ffi::c_char,
        __lasts: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::core::ffi::c_int,
        __strerrbuf: *mut ::core::ffi::c_char,
        __buflen: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __c: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::core::ffi::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::core::ffi::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::core::ffi::c_void,
        __smax: rsize_t,
        __c: ::core::ffi::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::core::ffi::c_void,
        __big_len: usize,
        __little: *const ::core::ffi::c_void,
        __little_len: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::core::ffi::c_void,
        __pattern4: *const ::core::ffi::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::core::ffi::c_void,
        __pattern8: *const ::core::ffi::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::core::ffi::c_void,
        __pattern16: *const ::core::ffi::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::core::ffi::c_char,
        __little: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::core::ffi::c_char,
        __little: *const ::core::ffi::c_char,
        __len: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::core::ffi::c_char,
        __source: *const ::core::ffi::c_char,
        __size: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::core::ffi::c_char,
        __source: *const ::core::ffi::c_char,
        __size: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::core::ffi::c_int, __bp: *mut ::core::ffi::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::core::ffi::c_char,
        __delim: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn swab(arg1: *const ::core::ffi::c_void, arg2: *mut ::core::ffi::c_void, arg3: isize);
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::core::ffi::c_void,
        __b2: *const ::core::ffi::c_void,
        __len: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::core::ffi::c_int,
        __strsignalbuf: *mut ::core::ffi::c_char,
        __buflen: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const ::core::ffi::c_void, arg2: *mut ::core::ffi::c_void, arg3: usize);
}
extern "C" {
    pub fn bzero(arg1: *mut ::core::ffi::c_void, arg2: ::core::ffi::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::core::ffi::c_char,
        arg2: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fls(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::core::ffi::c_long) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::core::ffi::c_longlong) -> ::core::ffi::c_int;
}
pub const json_value_type_kJSONNull: json_value_type = 0;
pub const json_value_type_kJSONTrue: json_value_type = 1;
pub const json_value_type_kJSONFalse: json_value_type = 2;
pub const json_value_type_kJSONInteger: json_value_type = 3;
pub const json_value_type_kJSONFloat: json_value_type = 4;
pub const json_value_type_kJSONString: json_value_type = 5;
pub const json_value_type_kJSONArray: json_value_type = 6;
pub const json_value_type_kJSONTable: json_value_type = 7;
pub type json_value_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct json_value {
    pub type_: ::core::ffi::c_char,
    pub data: json_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union json_value__bindgen_ty_1 {
    pub intval: ::core::ffi::c_int,
    pub floatval: f32,
    pub stringval: *mut ::core::ffi::c_char,
    pub arrayval: *mut ::core::ffi::c_void,
    pub tableval: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_json_value__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<json_value__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<json_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(json_value__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<json_value__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(json_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).intval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_value__bindgen_ty_1),
            "::",
            stringify!(intval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).floatval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_value__bindgen_ty_1),
            "::",
            stringify!(floatval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stringval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_value__bindgen_ty_1),
            "::",
            stringify!(stringval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arrayval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_value__bindgen_ty_1),
            "::",
            stringify!(arrayval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tableval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_value__bindgen_ty_1),
            "::",
            stringify!(tableval)
        )
    );
}
#[test]
fn bindgen_test_layout_json_value() {
    const UNINIT: ::core::mem::MaybeUninit<json_value> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<json_value>(),
        16usize,
        concat!("Size of: ", stringify!(json_value))
    );
    assert_eq!(
        ::core::mem::align_of::<json_value>(),
        8usize,
        concat!("Alignment of ", stringify!(json_value))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_value),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(json_value),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct json_decoder {
    pub decodeError: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            error: *const ::core::ffi::c_char,
            linenum: ::core::ffi::c_int,
        ),
    >,
    pub willDecodeSublist: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            name: *const ::core::ffi::c_char,
            type_: json_value_type,
        ),
    >,
    pub shouldDecodeTableValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            key: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub didDecodeTableValue: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            key: *const ::core::ffi::c_char,
            value: json_value,
        ),
    >,
    pub shouldDecodeArrayValueAtIndex: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            pos: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub didDecodeArrayValue: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            pos: ::core::ffi::c_int,
            value: json_value,
        ),
    >,
    pub didDecodeSublist: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            name: *const ::core::ffi::c_char,
            type_: json_value_type,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub userdata: *mut ::core::ffi::c_void,
    pub returnString: ::core::ffi::c_int,
    pub path: *const ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_json_decoder() {
    const UNINIT: ::core::mem::MaybeUninit<json_decoder> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<json_decoder>(),
        80usize,
        concat!("Size of: ", stringify!(json_decoder))
    );
    assert_eq!(
        ::core::mem::align_of::<json_decoder>(),
        8usize,
        concat!("Alignment of ", stringify!(json_decoder))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decodeError) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(decodeError)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).willDecodeSublist) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(willDecodeSublist)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).shouldDecodeTableValueForKey) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(shouldDecodeTableValueForKey)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).didDecodeTableValue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(didDecodeTableValue)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).shouldDecodeArrayValueAtIndex) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(shouldDecodeArrayValueAtIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).didDecodeArrayValue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(didDecodeArrayValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).didDecodeSublist) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(didDecodeSublist)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).returnString) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(returnString)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(json_decoder),
            "::",
            stringify!(path)
        )
    );
}
pub type json_readFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::core::ffi::c_void,
        buf: *mut u8,
        bufsize: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct json_reader {
    pub read: json_readFunc,
    pub userdata: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_json_reader() {
    const UNINIT: ::core::mem::MaybeUninit<json_reader> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<json_reader>(),
        16usize,
        concat!("Size of: ", stringify!(json_reader))
    );
    assert_eq!(
        ::core::mem::align_of::<json_reader>(),
        8usize,
        concat!("Alignment of ", stringify!(json_reader))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_reader),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(json_reader),
            "::",
            stringify!(userdata)
        )
    );
}
pub type json_writeFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::core::ffi::c_void,
        str_: *const ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct json_encoder {
    pub writeStringFunc: json_writeFunc,
    pub userdata: *mut ::core::ffi::c_void,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub startArray: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub addArrayMember: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub endArray: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub startTable: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub addTableMember: ::core::option::Option<
        unsafe extern "C" fn(
            encoder: *mut json_encoder,
            name: *const ::core::ffi::c_char,
            len: ::core::ffi::c_int,
        ),
    >,
    pub endTable: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub writeNull: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub writeFalse: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub writeTrue: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub writeInt: ::core::option::Option<
        unsafe extern "C" fn(encoder: *mut json_encoder, num: ::core::ffi::c_int),
    >,
    pub writeDouble:
        ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder, num: f64)>,
    pub writeString: ::core::option::Option<
        unsafe extern "C" fn(
            encoder: *mut json_encoder,
            str_: *const ::core::ffi::c_char,
            len: ::core::ffi::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_json_encoder() {
    const UNINIT: ::core::mem::MaybeUninit<json_encoder> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<json_encoder>(),
        120usize,
        concat!("Size of: ", stringify!(json_encoder))
    );
    assert_eq!(
        ::core::mem::align_of::<json_encoder>(),
        8usize,
        concat!("Alignment of ", stringify!(json_encoder))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).writeStringFunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(writeStringFunc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).startArray) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(startArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addArrayMember) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(addArrayMember)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).endArray) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(endArray)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).startTable) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(startTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addTableMember) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(addTableMember)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).endTable) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(endTable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).writeNull) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(writeNull)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).writeFalse) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(writeFalse)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).writeTrue) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(writeTrue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).writeInt) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(writeInt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).writeDouble) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(writeDouble)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).writeString) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(json_encoder),
            "::",
            stringify!(writeString)
        )
    );
}
impl json_encoder {
    #[inline]
    pub fn pretty(&self) -> ::core::ffi::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pretty(&mut self, val: ::core::ffi::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn startedTable(&self) -> ::core::ffi::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_startedTable(&mut self, val: ::core::ffi::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn startedArray(&self) -> ::core::ffi::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_startedArray(&mut self, val: ::core::ffi::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn depth(&self) -> ::core::ffi::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_depth(&mut self, val: ::core::ffi::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pretty: ::core::ffi::c_int,
        startedTable: ::core::ffi::c_int,
        startedArray: ::core::ffi::c_int,
        depth: ::core::ffi::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pretty: u32 = unsafe { ::core::mem::transmute(pretty) };
            pretty as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let startedTable: u32 = unsafe { ::core::mem::transmute(startedTable) };
            startedTable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let startedArray: u32 = unsafe { ::core::mem::transmute(startedArray) };
            startedArray as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let depth: u32 = unsafe { ::core::mem::transmute(depth) };
            depth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_json {
    pub initEncoder: ::core::option::Option<
        unsafe extern "C" fn(
            encoder: *mut json_encoder,
            write: json_writeFunc,
            userdata: *mut ::core::ffi::c_void,
            pretty: ::core::ffi::c_int,
        ),
    >,
    pub decode: ::core::option::Option<
        unsafe extern "C" fn(
            functions: *mut json_decoder,
            reader: json_reader,
            outval: *mut json_value,
        ) -> ::core::ffi::c_int,
    >,
    pub decodeString: ::core::option::Option<
        unsafe extern "C" fn(
            functions: *mut json_decoder,
            jsonString: *const ::core::ffi::c_char,
            outval: *mut json_value,
        ) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_playdate_json() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_json> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_json>(),
        24usize,
        concat!("Size of: ", stringify!(playdate_json))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_json>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_json))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).initEncoder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_json),
            "::",
            stringify!(initEncoder)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_json),
            "::",
            stringify!(decode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decodeString) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_json),
            "::",
            stringify!(decodeString)
        )
    );
}
pub type SDFile = ::core::ffi::c_void;
pub const FileOptions_kFileRead: FileOptions = 1;
pub const FileOptions_kFileReadData: FileOptions = 2;
pub const FileOptions_kFileWrite: FileOptions = 4;
pub const FileOptions_kFileAppend: FileOptions = 8;
pub type FileOptions = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FileStat {
    pub isdir: ::core::ffi::c_int,
    pub size: ::core::ffi::c_uint,
    pub m_year: ::core::ffi::c_int,
    pub m_month: ::core::ffi::c_int,
    pub m_day: ::core::ffi::c_int,
    pub m_hour: ::core::ffi::c_int,
    pub m_minute: ::core::ffi::c_int,
    pub m_second: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_FileStat() {
    const UNINIT: ::core::mem::MaybeUninit<FileStat> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FileStat>(),
        32usize,
        concat!("Size of: ", stringify!(FileStat))
    );
    assert_eq!(
        ::core::mem::align_of::<FileStat>(),
        4usize,
        concat!("Alignment of ", stringify!(FileStat))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isdir) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FileStat),
            "::",
            stringify!(isdir)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FileStat),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_year) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FileStat),
            "::",
            stringify!(m_year)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_month) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FileStat),
            "::",
            stringify!(m_month)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_day) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FileStat),
            "::",
            stringify!(m_day)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_hour) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FileStat),
            "::",
            stringify!(m_hour)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_minute) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FileStat),
            "::",
            stringify!(m_minute)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m_second) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FileStat),
            "::",
            stringify!(m_second)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_file {
    pub geterr: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub listfiles: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            callback: ::core::option::Option<
                unsafe extern "C" fn(
                    path: *const ::core::ffi::c_char,
                    userdata: *mut ::core::ffi::c_void,
                ),
            >,
            userdata: *mut ::core::ffi::c_void,
            showhidden: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub stat: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            stat: *mut FileStat,
        ) -> ::core::ffi::c_int,
    >,
    pub mkdir: ::core::option::Option<
        unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub unlink: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            recursive: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub rename: ::core::option::Option<
        unsafe extern "C" fn(
            from: *const ::core::ffi::c_char,
            to: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub open: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char, mode: FileOptions) -> *mut SDFile,
    >,
    pub close:
        ::core::option::Option<unsafe extern "C" fn(file: *mut SDFile) -> ::core::ffi::c_int>,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut SDFile,
            buf: *mut ::core::ffi::c_void,
            len: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut SDFile,
            buf: *const ::core::ffi::c_void,
            len: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub flush:
        ::core::option::Option<unsafe extern "C" fn(file: *mut SDFile) -> ::core::ffi::c_int>,
    pub tell: ::core::option::Option<unsafe extern "C" fn(file: *mut SDFile) -> ::core::ffi::c_int>,
    pub seek: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut SDFile,
            pos: ::core::ffi::c_int,
            whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_playdate_file() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_file> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_file>(),
        104usize,
        concat!("Size of: ", stringify!(playdate_file))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_file>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_file))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).geterr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(geterr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).listfiles) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(listfiles)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mkdir) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).unlink) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rename) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tell) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(tell)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_file),
            "::",
            stringify!(seek)
        )
    );
}
pub const SpriteCollisionResponseType_kCollisionTypeSlide: SpriteCollisionResponseType = 0;
pub const SpriteCollisionResponseType_kCollisionTypeFreeze: SpriteCollisionResponseType = 1;
pub const SpriteCollisionResponseType_kCollisionTypeOverlap: SpriteCollisionResponseType = 2;
pub const SpriteCollisionResponseType_kCollisionTypeBounce: SpriteCollisionResponseType = 3;
pub type SpriteCollisionResponseType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDRect {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_PDRect() {
    const UNINIT: ::core::mem::MaybeUninit<PDRect> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PDRect>(),
        16usize,
        concat!("Size of: ", stringify!(PDRect))
    );
    assert_eq!(
        ::core::mem::align_of::<PDRect>(),
        4usize,
        concat!("Alignment of ", stringify!(PDRect))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(PDRect), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(PDRect), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PDRect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PDRect),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CollisionPoint {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_CollisionPoint() {
    const UNINIT: ::core::mem::MaybeUninit<CollisionPoint> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CollisionPoint>(),
        8usize,
        concat!("Size of: ", stringify!(CollisionPoint))
    );
    assert_eq!(
        ::core::mem::align_of::<CollisionPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(CollisionPoint))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CollisionPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CollisionPoint),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CollisionVector {
    pub x: ::core::ffi::c_int,
    pub y: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout_CollisionVector() {
    const UNINIT: ::core::mem::MaybeUninit<CollisionVector> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CollisionVector>(),
        8usize,
        concat!("Size of: ", stringify!(CollisionVector))
    );
    assert_eq!(
        ::core::mem::align_of::<CollisionVector>(),
        4usize,
        concat!("Alignment of ", stringify!(CollisionVector))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CollisionVector),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CollisionVector),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteCollisionInfo {
    pub sprite: *mut LCDSprite,
    pub other: *mut LCDSprite,
    pub responseType: SpriteCollisionResponseType,
    pub overlaps: u8,
    pub ti: f32,
    pub move_: CollisionPoint,
    pub normal: CollisionVector,
    pub touch: CollisionPoint,
    pub spriteRect: PDRect,
    pub otherRect: PDRect,
}
#[test]
fn bindgen_test_layout_SpriteCollisionInfo() {
    const UNINIT: ::core::mem::MaybeUninit<SpriteCollisionInfo> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SpriteCollisionInfo>(),
        88usize,
        concat!("Size of: ", stringify!(SpriteCollisionInfo))
    );
    assert_eq!(
        ::core::mem::align_of::<SpriteCollisionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SpriteCollisionInfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sprite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(sprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).other) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).responseType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(responseType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).overlaps) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(overlaps)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ti) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(ti)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).move_) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(move_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).normal) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).touch) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(touch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).spriteRect) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(spriteRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).otherRect) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteCollisionInfo),
            "::",
            stringify!(otherRect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpriteQueryInfo {
    pub sprite: *mut LCDSprite,
    pub ti1: f32,
    pub ti2: f32,
    pub entryPoint: CollisionPoint,
    pub exitPoint: CollisionPoint,
}
#[test]
fn bindgen_test_layout_SpriteQueryInfo() {
    const UNINIT: ::core::mem::MaybeUninit<SpriteQueryInfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SpriteQueryInfo>(),
        32usize,
        concat!("Size of: ", stringify!(SpriteQueryInfo))
    );
    assert_eq!(
        ::core::mem::align_of::<SpriteQueryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SpriteQueryInfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sprite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteQueryInfo),
            "::",
            stringify!(sprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ti1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteQueryInfo),
            "::",
            stringify!(ti1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ti2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteQueryInfo),
            "::",
            stringify!(ti2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entryPoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteQueryInfo),
            "::",
            stringify!(entryPoint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exitPoint) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SpriteQueryInfo),
            "::",
            stringify!(exitPoint)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CWCollisionInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CWItemInfo {
    _unused: [u8; 0],
}
pub type LCDSpriteDrawFunction = ::core::option::Option<
    unsafe extern "C" fn(sprite: *mut LCDSprite, bounds: PDRect, drawrect: PDRect),
>;
pub type LCDSpriteUpdateFunction =
    ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>;
pub type LCDSpriteCollisionFilterProc = ::core::option::Option<
    unsafe extern "C" fn(
        sprite: *mut LCDSprite,
        other: *mut LCDSprite,
    ) -> SpriteCollisionResponseType,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sprite {
    pub setAlwaysRedraw: ::core::option::Option<unsafe extern "C" fn(flag: ::core::ffi::c_int)>,
    pub addDirtyRect: ::core::option::Option<unsafe extern "C" fn(dirtyRect: LCDRect)>,
    pub drawSprites: ::core::option::Option<unsafe extern "C" fn()>,
    pub updateAndDrawSprites: ::core::option::Option<unsafe extern "C" fn()>,
    pub newSprite: ::core::option::Option<unsafe extern "C" fn() -> *mut LCDSprite>,
    pub freeSprite: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub copy:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> *mut LCDSprite>,
    pub addSprite: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub removeSprite: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub removeSprites: ::core::option::Option<
        unsafe extern "C" fn(sprites: *mut *mut LCDSprite, count: ::core::ffi::c_int),
    >,
    pub removeAllSprites: ::core::option::Option<unsafe extern "C" fn()>,
    pub getSpriteCount: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub setBounds:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, bounds: PDRect)>,
    pub getBounds: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> PDRect>,
    pub moveTo:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, x: f32, y: f32)>,
    pub moveBy:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, dx: f32, dy: f32)>,
    pub setImage: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, image: *mut LCDBitmap, flip: LCDBitmapFlip),
    >,
    pub getImage:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> *mut LCDBitmap>,
    pub setSize:
        ::core::option::Option<unsafe extern "C" fn(s: *mut LCDSprite, width: f32, height: f32)>,
    pub setZIndex:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, zIndex: i16)>,
    pub getZIndex: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> i16>,
    pub setDrawMode: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, mode: LCDBitmapDrawMode),
    >,
    pub setImageFlip:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, flip: LCDBitmapFlip)>,
    pub getImageFlip:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> LCDBitmapFlip>,
    pub setStencil: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, stencil: *mut LCDBitmap),
    >,
    pub setClipRect:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, clipRect: LCDRect)>,
    pub clearClipRect: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub setClipRectsInRange: ::core::option::Option<
        unsafe extern "C" fn(
            clipRect: LCDRect,
            startZ: ::core::ffi::c_int,
            endZ: ::core::ffi::c_int,
        ),
    >,
    pub clearClipRectsInRange: ::core::option::Option<
        unsafe extern "C" fn(startZ: ::core::ffi::c_int, endZ: ::core::ffi::c_int),
    >,
    pub setUpdatesEnabled: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ::core::ffi::c_int),
    >,
    pub updatesEnabled:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> ::core::ffi::c_int>,
    pub setCollisionsEnabled: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ::core::ffi::c_int),
    >,
    pub collisionsEnabled:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> ::core::ffi::c_int>,
    pub setVisible: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ::core::ffi::c_int),
    >,
    pub isVisible:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> ::core::ffi::c_int>,
    pub setOpaque: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ::core::ffi::c_int),
    >,
    pub markDirty: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub setTag: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, tag: u8)>,
    pub getTag: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> u8>,
    pub setIgnoresDrawOffset: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ::core::ffi::c_int),
    >,
    pub setUpdateFunction: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, func: LCDSpriteUpdateFunction),
    >,
    pub setDrawFunction: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, func: LCDSpriteDrawFunction),
    >,
    pub getPosition: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, x: *mut f32, y: *mut f32),
    >,
    pub resetCollisionWorld: ::core::option::Option<unsafe extern "C" fn()>,
    pub setCollideRect:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, collideRect: PDRect)>,
    pub getCollideRect:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> PDRect>,
    pub clearCollideRect: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub setCollisionResponseFunction: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, func: LCDSpriteCollisionFilterProc),
    >,
    pub checkCollisions: ::core::option::Option<
        unsafe extern "C" fn(
            sprite: *mut LCDSprite,
            goalX: f32,
            goalY: f32,
            actualX: *mut f32,
            actualY: *mut f32,
            len: *mut ::core::ffi::c_int,
        ) -> *mut SpriteCollisionInfo,
    >,
    pub moveWithCollisions: ::core::option::Option<
        unsafe extern "C" fn(
            sprite: *mut LCDSprite,
            goalX: f32,
            goalY: f32,
            actualX: *mut f32,
            actualY: *mut f32,
            len: *mut ::core::ffi::c_int,
        ) -> *mut SpriteCollisionInfo,
    >,
    pub querySpritesAtPoint: ::core::option::Option<
        unsafe extern "C" fn(x: f32, y: f32, len: *mut ::core::ffi::c_int) -> *mut *mut LCDSprite,
    >,
    pub querySpritesInRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: f32,
            y: f32,
            width: f32,
            height: f32,
            len: *mut ::core::ffi::c_int,
        ) -> *mut *mut LCDSprite,
    >,
    pub querySpritesAlongLine: ::core::option::Option<
        unsafe extern "C" fn(
            x1: f32,
            y1: f32,
            x2: f32,
            y2: f32,
            len: *mut ::core::ffi::c_int,
        ) -> *mut *mut LCDSprite,
    >,
    pub querySpriteInfoAlongLine: ::core::option::Option<
        unsafe extern "C" fn(
            x1: f32,
            y1: f32,
            x2: f32,
            y2: f32,
            len: *mut ::core::ffi::c_int,
        ) -> *mut SpriteQueryInfo,
    >,
    pub overlappingSprites: ::core::option::Option<
        unsafe extern "C" fn(
            sprite: *mut LCDSprite,
            len: *mut ::core::ffi::c_int,
        ) -> *mut *mut LCDSprite,
    >,
    pub allOverlappingSprites: ::core::option::Option<
        unsafe extern "C" fn(len: *mut ::core::ffi::c_int) -> *mut *mut LCDSprite,
    >,
    pub setStencilPattern:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, pattern: *mut u8)>,
    pub clearStencil: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub setUserdata: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, userdata: *mut ::core::ffi::c_void),
    >,
    pub getUserdata: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite) -> *mut ::core::ffi::c_void,
    >,
    pub setStencilImage: ::core::option::Option<
        unsafe extern "C" fn(
            sprite: *mut LCDSprite,
            stencil: *mut LCDBitmap,
            tile: ::core::ffi::c_int,
        ),
    >,
    pub setCenter: ::core::option::Option<unsafe extern "C" fn(s: *mut LCDSprite, x: f32, y: f32)>,
    pub getCenter:
        ::core::option::Option<unsafe extern "C" fn(s: *mut LCDSprite, x: *mut f32, y: *mut f32)>,
}
#[test]
fn bindgen_test_layout_playdate_sprite() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sprite> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sprite>(),
        504usize,
        concat!("Size of: ", stringify!(playdate_sprite))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sprite>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sprite))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setAlwaysRedraw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setAlwaysRedraw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addDirtyRect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(addDirtyRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).drawSprites) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(drawSprites)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).updateAndDrawSprites) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(updateAndDrawSprites)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newSprite) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(newSprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeSprite) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(freeSprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).copy) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addSprite) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(addSprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeSprite) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(removeSprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeSprites) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(removeSprites)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeAllSprites) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(removeAllSprites)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getSpriteCount) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getSpriteCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setBounds) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setBounds)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getBounds) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getBounds)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).moveTo) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(moveTo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).moveBy) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(moveBy)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setImage) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setImage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getImage) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getImage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setSize) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setZIndex) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setZIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getZIndex) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getZIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDrawMode) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setDrawMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setImageFlip) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setImageFlip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getImageFlip) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getImageFlip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setStencil) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setStencil)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setClipRect) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setClipRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearClipRect) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(clearClipRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setClipRectsInRange) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setClipRectsInRange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearClipRectsInRange) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(clearClipRectsInRange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setUpdatesEnabled) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setUpdatesEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).updatesEnabled) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(updatesEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setCollisionsEnabled) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setCollisionsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).collisionsEnabled) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(collisionsEnabled)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVisible) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setVisible)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isVisible) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(isVisible)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setOpaque) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setOpaque)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).markDirty) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(markDirty)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTag) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setTag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTag) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getTag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setIgnoresDrawOffset) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setIgnoresDrawOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setUpdateFunction) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setUpdateFunction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDrawFunction) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setDrawFunction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getPosition) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getPosition)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).resetCollisionWorld) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(resetCollisionWorld)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setCollideRect) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setCollideRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getCollideRect) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getCollideRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearCollideRect) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(clearCollideRect)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).setCollisionResponseFunction) as usize - ptr as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setCollisionResponseFunction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).checkCollisions) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(checkCollisions)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).moveWithCollisions) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(moveWithCollisions)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).querySpritesAtPoint) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(querySpritesAtPoint)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).querySpritesInRect) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(querySpritesInRect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).querySpritesAlongLine) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(querySpritesAlongLine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).querySpriteInfoAlongLine) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(querySpriteInfoAlongLine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).overlappingSprites) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(overlappingSprites)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).allOverlappingSprites) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(allOverlappingSprites)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setStencilPattern) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setStencilPattern)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearStencil) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(clearStencil)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setUserdata) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setUserdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getUserdata) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getUserdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setStencilImage) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setStencilImage)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setCenter) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(setCenter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getCenter) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sprite),
            "::",
            stringify!(getCenter)
        )
    );
}
pub const SoundFormat_kSound8bitMono: SoundFormat = 0;
pub const SoundFormat_kSound8bitStereo: SoundFormat = 1;
pub const SoundFormat_kSound16bitMono: SoundFormat = 2;
pub const SoundFormat_kSound16bitStereo: SoundFormat = 3;
pub const SoundFormat_kSoundADPCMMono: SoundFormat = 4;
pub const SoundFormat_kSoundADPCMStereo: SoundFormat = 5;
pub type SoundFormat = ::core::ffi::c_uint;
pub type MIDINote = f32;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: f64) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::core::ffi::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::core::ffi::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::core::ffi::c_int) -> f64;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::core::ffi::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::core::ffi::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::core::ffi::c_int) -> f64;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::core::ffi::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::core::ffi::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::core::ffi::c_int) -> f64;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::core::ffi::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::core::ffi::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::core::ffi::c_long) -> f64;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::core::ffi::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::core::ffi::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::core::ffi::c_int) -> f64;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nanf(arg1: *const ::core::ffi::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::core::ffi::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::core::ffi::c_char) -> f64;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[test]
fn bindgen_test_layout___float2() {
    const UNINIT: ::core::mem::MaybeUninit<__float2> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__float2>(),
        8usize,
        concat!("Size of: ", stringify!(__float2))
    );
    assert_eq!(
        ::core::mem::align_of::<__float2>(),
        4usize,
        concat!("Alignment of ", stringify!(__float2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sinval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cosval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__cosval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[test]
fn bindgen_test_layout___double2() {
    const UNINIT: ::core::mem::MaybeUninit<__double2> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__double2>(),
        16usize,
        concat!("Size of: ", stringify!(__double2))
    );
    assert_eq!(
        ::core::mem::align_of::<__double2>(),
        8usize,
        concat!("Alignment of ", stringify!(__double2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__sinval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__cosval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__cosval)
        )
    );
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::core::ffi::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::core::ffi::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::core::ffi::c_int,
    pub name: *mut ::core::ffi::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    const UNINIT: ::core::mem::MaybeUninit<exception> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::core::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).retval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundSource {
    _unused: [u8; 0],
}
pub type sndCallbackProc = ::core::option::Option<
    unsafe extern "C" fn(c: *mut SoundSource, userdata: *mut ::core::ffi::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_source {
    pub setVolume:
        ::core::option::Option<unsafe extern "C" fn(c: *mut SoundSource, lvol: f32, rvol: f32)>,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(c: *mut SoundSource, outl: *mut f32, outr: *mut f32),
    >,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(c: *mut SoundSource) -> ::core::ffi::c_int>,
    pub setFinishCallback: ::core::option::Option<
        unsafe extern "C" fn(
            c: *mut SoundSource,
            callback: sndCallbackProc,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_source() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_source> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_source>(),
        32usize,
        concat!("Size of: ", stringify!(playdate_sound_source))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_source>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_source))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVolume) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_source),
            "::",
            stringify!(setVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getVolume) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_source),
            "::",
            stringify!(getVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isPlaying) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_source),
            "::",
            stringify!(isPlaying)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFinishCallback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_source),
            "::",
            stringify!(setFinishCallback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilePlayer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_fileplayer {
    pub newPlayer: ::core::option::Option<unsafe extern "C" fn() -> *mut FilePlayer>,
    pub freePlayer: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer)>,
    pub loadIntoPlayer: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            path: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub setBufferLength:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, bufferLen: f32)>,
    pub play: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            repeat: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> ::core::ffi::c_int>,
    pub pause: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer)>,
    pub stop: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer)>,
    pub setVolume: ::core::option::Option<
        unsafe extern "C" fn(player: *mut FilePlayer, left: f32, right: f32),
    >,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(player: *mut FilePlayer, left: *mut f32, right: *mut f32),
    >,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> f32>,
    pub setOffset:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, offset: f32)>,
    pub setRate: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, rate: f32)>,
    pub setLoopRange:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, start: f32, end: f32)>,
    pub didUnderrun:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> ::core::ffi::c_int>,
    pub setFinishCallback: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            callback: sndCallbackProc,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
    pub setLoopCallback: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            callback: sndCallbackProc,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
    pub getOffset: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> f32>,
    pub getRate: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> f32>,
    pub setStopOnUnderrun: ::core::option::Option<
        unsafe extern "C" fn(player: *mut FilePlayer, flag: ::core::ffi::c_int),
    >,
    pub fadeVolume: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            left: f32,
            right: f32,
            len: i32,
            finishCallback: sndCallbackProc,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
    pub setMP3StreamSource: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            dataSource: ::core::option::Option<
                unsafe extern "C" fn(
                    data: *mut u8,
                    bytes: ::core::ffi::c_int,
                    userdata: *mut ::core::ffi::c_void,
                ) -> ::core::ffi::c_int,
            >,
            userdata: *mut ::core::ffi::c_void,
            bufferLen: f32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_fileplayer() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_fileplayer> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_fileplayer>(),
        176usize,
        concat!("Size of: ", stringify!(playdate_sound_fileplayer))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_fileplayer>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_fileplayer))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newPlayer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(newPlayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freePlayer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(freePlayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadIntoPlayer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(loadIntoPlayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setBufferLength) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setBufferLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).play) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(play)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isPlaying) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(isPlaying)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pause) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(pause)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVolume) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getVolume) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(getVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getLength) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setOffset) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setRate) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLoopRange) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setLoopRange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).didUnderrun) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(didUnderrun)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFinishCallback) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setFinishCallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLoopCallback) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setLoopCallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getOffset) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(getOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getRate) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(getRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setStopOnUnderrun) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setStopOnUnderrun)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fadeVolume) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(fadeVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMP3StreamSource) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_fileplayer),
            "::",
            stringify!(setMP3StreamSource)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioSample {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SamplePlayer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_sample {
    pub newSampleBuffer: ::core::option::Option<
        unsafe extern "C" fn(byteCount: ::core::ffi::c_int) -> *mut AudioSample,
    >,
    pub loadIntoSample: ::core::option::Option<
        unsafe extern "C" fn(
            sample: *mut AudioSample,
            path: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub load: ::core::option::Option<
        unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> *mut AudioSample,
    >,
    pub newSampleFromData: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut u8,
            format: SoundFormat,
            sampleRate: u32,
            byteCount: ::core::ffi::c_int,
        ) -> *mut AudioSample,
    >,
    pub getData: ::core::option::Option<
        unsafe extern "C" fn(
            sample: *mut AudioSample,
            data: *mut *mut u8,
            format: *mut SoundFormat,
            sampleRate: *mut u32,
            bytelength: *mut u32,
        ),
    >,
    pub freeSample: ::core::option::Option<unsafe extern "C" fn(sample: *mut AudioSample)>,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(sample: *mut AudioSample) -> f32>,
    pub decompress: ::core::option::Option<
        unsafe extern "C" fn(sample: *mut AudioSample) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_sample() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_sample> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_sample>(),
        64usize,
        concat!("Size of: ", stringify!(playdate_sound_sample))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_sample>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_sample))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newSampleBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sample),
            "::",
            stringify!(newSampleBuffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadIntoSample) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sample),
            "::",
            stringify!(loadIntoSample)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).load) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sample),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newSampleFromData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sample),
            "::",
            stringify!(newSampleFromData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sample),
            "::",
            stringify!(getData)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeSample) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sample),
            "::",
            stringify!(freeSample)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getLength) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sample),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decompress) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sample),
            "::",
            stringify!(decompress)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_sampleplayer {
    pub newPlayer: ::core::option::Option<unsafe extern "C" fn() -> *mut SamplePlayer>,
    pub freePlayer: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer)>,
    pub setSample: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, sample: *mut AudioSample),
    >,
    pub play: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut SamplePlayer,
            repeat: ::core::ffi::c_int,
            rate: f32,
        ) -> ::core::ffi::c_int,
    >,
    pub isPlaying: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer) -> ::core::ffi::c_int,
    >,
    pub stop: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer)>,
    pub setVolume: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, left: f32, right: f32),
    >,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, left: *mut f32, right: *mut f32),
    >,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer) -> f32>,
    pub setOffset:
        ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer, offset: f32)>,
    pub setRate: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer, rate: f32)>,
    pub setPlayRange: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut SamplePlayer,
            start: ::core::ffi::c_int,
            end: ::core::ffi::c_int,
        ),
    >,
    pub setFinishCallback: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut SamplePlayer,
            callback: sndCallbackProc,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
    pub setLoopCallback: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut SamplePlayer,
            callback: sndCallbackProc,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
    pub getOffset: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer) -> f32>,
    pub getRate: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer) -> f32>,
    pub setPaused: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, flag: ::core::ffi::c_int),
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_sampleplayer() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_sampleplayer> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_sampleplayer>(),
        136usize,
        concat!("Size of: ", stringify!(playdate_sound_sampleplayer))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_sampleplayer>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_sampleplayer))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newPlayer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(newPlayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freePlayer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(freePlayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setSample) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(setSample)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).play) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(play)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isPlaying) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(isPlaying)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVolume) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(setVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getVolume) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(getVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getLength) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setOffset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(setOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setRate) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(setRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setPlayRange) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(setPlayRange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFinishCallback) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(setFinishCallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLoopCallback) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(setLoopCallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getOffset) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(getOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getRate) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(getRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setPaused) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sampleplayer),
            "::",
            stringify!(setPaused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthSignalValue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthSignal {
    _unused: [u8; 0],
}
pub type signalStepFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::core::ffi::c_void,
        ioframes: *mut ::core::ffi::c_int,
        ifval: *mut f32,
    ) -> f32,
>;
pub type signalNoteOnFunc = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ::core::ffi::c_void, note: MIDINote, vel: f32, len: f32),
>;
pub type signalNoteOffFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::core::ffi::c_void,
        stop: ::core::ffi::c_int,
        offset: ::core::ffi::c_int,
    ),
>;
pub type signalDeallocFunc =
    ::core::option::Option<unsafe extern "C" fn(userdata: *mut ::core::ffi::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_signal {
    pub newSignal: ::core::option::Option<
        unsafe extern "C" fn(
            step: signalStepFunc,
            noteOn: signalNoteOnFunc,
            noteOff: signalNoteOffFunc,
            dealloc: signalDeallocFunc,
            userdata: *mut ::core::ffi::c_void,
        ) -> *mut PDSynthSignal,
    >,
    pub freeSignal: ::core::option::Option<unsafe extern "C" fn(signal: *mut PDSynthSignal)>,
    pub getValue: ::core::option::Option<unsafe extern "C" fn(signal: *mut PDSynthSignal) -> f32>,
    pub setValueScale:
        ::core::option::Option<unsafe extern "C" fn(signal: *mut PDSynthSignal, scale: f32)>,
    pub setValueOffset:
        ::core::option::Option<unsafe extern "C" fn(signal: *mut PDSynthSignal, offset: f32)>,
}
#[test]
fn bindgen_test_layout_playdate_sound_signal() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_signal> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_signal>(),
        40usize,
        concat!("Size of: ", stringify!(playdate_sound_signal))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_signal>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_signal))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newSignal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_signal),
            "::",
            stringify!(newSignal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeSignal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_signal),
            "::",
            stringify!(freeSignal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getValue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_signal),
            "::",
            stringify!(getValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setValueScale) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_signal),
            "::",
            stringify!(setValueScale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setValueOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_signal),
            "::",
            stringify!(setValueOffset)
        )
    );
}
pub const LFOType_kLFOTypeSquare: LFOType = 0;
pub const LFOType_kLFOTypeTriangle: LFOType = 1;
pub const LFOType_kLFOTypeSine: LFOType = 2;
pub const LFOType_kLFOTypeSampleAndHold: LFOType = 3;
pub const LFOType_kLFOTypeSawtoothUp: LFOType = 4;
pub const LFOType_kLFOTypeSawtoothDown: LFOType = 5;
pub const LFOType_kLFOTypeArpeggiator: LFOType = 6;
pub const LFOType_kLFOTypeFunction: LFOType = 7;
pub type LFOType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthLFO {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_lfo {
    pub newLFO: ::core::option::Option<unsafe extern "C" fn(type_: LFOType) -> *mut PDSynthLFO>,
    pub freeLFO: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO)>,
    pub setType: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, type_: LFOType)>,
    pub setRate: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, rate: f32)>,
    pub setPhase: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, phase: f32)>,
    pub setCenter: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, center: f32)>,
    pub setDepth: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, depth: f32)>,
    pub setArpeggiation: ::core::option::Option<
        unsafe extern "C" fn(lfo: *mut PDSynthLFO, nSteps: ::core::ffi::c_int, steps: *mut f32),
    >,
    pub setFunction: ::core::option::Option<
        unsafe extern "C" fn(
            lfo: *mut PDSynthLFO,
            lfoFunc: ::core::option::Option<
                unsafe extern "C" fn(
                    lfo: *mut PDSynthLFO,
                    userdata: *mut ::core::ffi::c_void,
                ) -> f32,
            >,
            userdata: *mut ::core::ffi::c_void,
            interpolate: ::core::ffi::c_int,
        ),
    >,
    pub setDelay: ::core::option::Option<
        unsafe extern "C" fn(lfo: *mut PDSynthLFO, holdoff: f32, ramptime: f32),
    >,
    pub setRetrigger: ::core::option::Option<
        unsafe extern "C" fn(lfo: *mut PDSynthLFO, flag: ::core::ffi::c_int),
    >,
    pub getValue: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO) -> f32>,
    pub setGlobal: ::core::option::Option<
        unsafe extern "C" fn(lfo: *mut PDSynthLFO, global: ::core::ffi::c_int),
    >,
    pub setStartPhase:
        ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, phase: f32)>,
}
#[test]
fn bindgen_test_layout_playdate_sound_lfo() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_lfo> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_lfo>(),
        112usize,
        concat!("Size of: ", stringify!(playdate_sound_lfo))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_lfo>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_lfo))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newLFO) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(newLFO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeLFO) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(freeLFO)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setRate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setPhase) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setPhase)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setCenter) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setCenter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDepth) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setDepth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setArpeggiation) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setArpeggiation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFunction) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setFunction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDelay) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setDelay)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setRetrigger) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setRetrigger)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getValue) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(getValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setGlobal) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setGlobal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setStartPhase) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_lfo),
            "::",
            stringify!(setStartPhase)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthEnvelope {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_envelope {
    pub newEnvelope: ::core::option::Option<
        unsafe extern "C" fn(
            attack: f32,
            decay: f32,
            sustain: f32,
            release: f32,
        ) -> *mut PDSynthEnvelope,
    >,
    pub freeEnvelope: ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope)>,
    pub setAttack:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, attack: f32)>,
    pub setDecay:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, decay: f32)>,
    pub setSustain:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, sustain: f32)>,
    pub setRelease:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, release: f32)>,
    pub setLegato: ::core::option::Option<
        unsafe extern "C" fn(env: *mut PDSynthEnvelope, flag: ::core::ffi::c_int),
    >,
    pub setRetrigger: ::core::option::Option<
        unsafe extern "C" fn(lfo: *mut PDSynthEnvelope, flag: ::core::ffi::c_int),
    >,
    pub getValue: ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope) -> f32>,
    pub setCurvature:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, amount: f32)>,
    pub setVelocitySensitivity:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, velsens: f32)>,
    pub setRateScaling: ::core::option::Option<
        unsafe extern "C" fn(
            env: *mut PDSynthEnvelope,
            scaling: f32,
            start: MIDINote,
            end: MIDINote,
        ),
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_envelope() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_envelope> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_envelope>(),
        96usize,
        concat!("Size of: ", stringify!(playdate_sound_envelope))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_envelope>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_envelope))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newEnvelope) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(newEnvelope)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeEnvelope) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(freeEnvelope)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setAttack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setAttack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDecay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setDecay)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setSustain) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setSustain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setRelease) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setRelease)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLegato) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setLegato)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setRetrigger) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setRetrigger)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getValue) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(getValue)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setCurvature) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setCurvature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVelocitySensitivity) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setVelocitySensitivity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setRateScaling) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_envelope),
            "::",
            stringify!(setRateScaling)
        )
    );
}
pub const SoundWaveform_kWaveformSquare: SoundWaveform = 0;
pub const SoundWaveform_kWaveformTriangle: SoundWaveform = 1;
pub const SoundWaveform_kWaveformSine: SoundWaveform = 2;
pub const SoundWaveform_kWaveformNoise: SoundWaveform = 3;
pub const SoundWaveform_kWaveformSawtooth: SoundWaveform = 4;
pub const SoundWaveform_kWaveformPOPhase: SoundWaveform = 5;
pub const SoundWaveform_kWaveformPODigital: SoundWaveform = 6;
pub const SoundWaveform_kWaveformPOVosim: SoundWaveform = 7;
pub type SoundWaveform = ::core::ffi::c_uint;
pub type synthRenderFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::core::ffi::c_void,
        left: *mut i32,
        right: *mut i32,
        nsamples: ::core::ffi::c_int,
        rate: u32,
        drate: i32,
    ) -> ::core::ffi::c_int,
>;
pub type synthNoteOnFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::core::ffi::c_void,
        note: MIDINote,
        velocity: f32,
        len: f32,
    ),
>;
pub type synthReleaseFunc = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ::core::ffi::c_void, stop: ::core::ffi::c_int),
>;
pub type synthSetParameterFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::core::ffi::c_void,
        parameter: ::core::ffi::c_int,
        value: f32,
    ) -> ::core::ffi::c_int,
>;
pub type synthDeallocFunc =
    ::core::option::Option<unsafe extern "C" fn(userdata: *mut ::core::ffi::c_void)>;
pub type synthCopyUserdata = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynth {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_synth {
    pub newSynth: ::core::option::Option<unsafe extern "C" fn() -> *mut PDSynth>,
    pub freeSynth: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth)>,
    pub setWaveform:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, wave: SoundWaveform)>,
    pub setGenerator_deprecated: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            stereo: ::core::ffi::c_int,
            render: synthRenderFunc,
            noteOn: synthNoteOnFunc,
            release: synthReleaseFunc,
            setparam: synthSetParameterFunc,
            dealloc: synthDeallocFunc,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
    pub setSample: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            sample: *mut AudioSample,
            sustainStart: u32,
            sustainEnd: u32,
        ),
    >,
    pub setAttackTime:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, attack: f32)>,
    pub setDecayTime: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, decay: f32)>,
    pub setSustainLevel:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, sustain: f32)>,
    pub setReleaseTime:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, release: f32)>,
    pub setTranspose:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, halfSteps: f32)>,
    pub setFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, mod_: *mut PDSynthSignalValue),
    >,
    pub getFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth) -> *mut PDSynthSignalValue,
    >,
    pub setAmplitudeModulator: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, mod_: *mut PDSynthSignalValue),
    >,
    pub getAmplitudeModulator: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth) -> *mut PDSynthSignalValue,
    >,
    pub getParameterCount:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth) -> ::core::ffi::c_int>,
    pub setParameter: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            parameter: ::core::ffi::c_int,
            value: f32,
        ) -> ::core::ffi::c_int,
    >,
    pub setParameterModulator: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            parameter: ::core::ffi::c_int,
            mod_: *mut PDSynthSignalValue,
        ),
    >,
    pub getParameterModulator: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            parameter: ::core::ffi::c_int,
        ) -> *mut PDSynthSignalValue,
    >,
    pub playNote: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, freq: f32, vel: f32, len: f32, when: u32),
    >,
    pub playMIDINote: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, note: MIDINote, vel: f32, len: f32, when: u32),
    >,
    pub noteOff: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, when: u32)>,
    pub stop: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth)>,
    pub setVolume:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, left: f32, right: f32)>,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, left: *mut f32, right: *mut f32),
    >,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth) -> ::core::ffi::c_int>,
    pub getEnvelope:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth) -> *mut PDSynthEnvelope>,
    pub setWavetable: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            sample: *mut AudioSample,
            log2size: ::core::ffi::c_int,
            columns: ::core::ffi::c_int,
            rows: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub setGenerator: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            stereo: ::core::ffi::c_int,
            render: synthRenderFunc,
            noteOn: synthNoteOnFunc,
            release: synthReleaseFunc,
            setparam: synthSetParameterFunc,
            dealloc: synthDeallocFunc,
            copyUserdata: synthCopyUserdata,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
    pub copy: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth) -> *mut PDSynth>,
}
#[test]
fn bindgen_test_layout_playdate_sound_synth() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_synth> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_synth>(),
        232usize,
        concat!("Size of: ", stringify!(playdate_sound_synth))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_synth>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_synth))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newSynth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(newSynth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeSynth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(freeSynth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setWaveform) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setWaveform)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setGenerator_deprecated) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setGenerator_deprecated)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setSample) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setSample)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setAttackTime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setAttackTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setDecayTime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setDecayTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setSustainLevel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setSustainLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setReleaseTime) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setReleaseTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTranspose) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setTranspose)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFrequencyModulator) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setFrequencyModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getFrequencyModulator) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(getFrequencyModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setAmplitudeModulator) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setAmplitudeModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getAmplitudeModulator) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(getAmplitudeModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getParameterCount) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(getParameterCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setParameter) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setParameter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setParameterModulator) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setParameterModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getParameterModulator) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(getParameterModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).playNote) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(playNote)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).playMIDINote) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(playMIDINote)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).noteOff) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(noteOff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVolume) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getVolume) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(getVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isPlaying) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(isPlaying)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getEnvelope) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(getEnvelope)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setWavetable) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setWavetable)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setGenerator) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(setGenerator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).copy) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_synth),
            "::",
            stringify!(copy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ControlSignal {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_control_signal {
    pub newSignal: ::core::option::Option<unsafe extern "C" fn() -> *mut ControlSignal>,
    pub freeSignal: ::core::option::Option<unsafe extern "C" fn(signal: *mut ControlSignal)>,
    pub clearEvents: ::core::option::Option<unsafe extern "C" fn(control: *mut ControlSignal)>,
    pub addEvent: ::core::option::Option<
        unsafe extern "C" fn(
            control: *mut ControlSignal,
            step: ::core::ffi::c_int,
            value: f32,
            interpolate: ::core::ffi::c_int,
        ),
    >,
    pub removeEvent: ::core::option::Option<
        unsafe extern "C" fn(control: *mut ControlSignal, step: ::core::ffi::c_int),
    >,
    pub getMIDIControllerNumber: ::core::option::Option<
        unsafe extern "C" fn(control: *mut ControlSignal) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_playdate_control_signal() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_control_signal> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_control_signal>(),
        48usize,
        concat!("Size of: ", stringify!(playdate_control_signal))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_control_signal>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_control_signal))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newSignal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_control_signal),
            "::",
            stringify!(newSignal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeSignal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_control_signal),
            "::",
            stringify!(freeSignal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearEvents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_control_signal),
            "::",
            stringify!(clearEvents)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addEvent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_control_signal),
            "::",
            stringify!(addEvent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeEvent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_control_signal),
            "::",
            stringify!(removeEvent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getMIDIControllerNumber) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_control_signal),
            "::",
            stringify!(getMIDIControllerNumber)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthInstrument {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_instrument {
    pub newInstrument: ::core::option::Option<unsafe extern "C" fn() -> *mut PDSynthInstrument>,
    pub freeInstrument: ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument)>,
    pub addVoice: ::core::option::Option<
        unsafe extern "C" fn(
            inst: *mut PDSynthInstrument,
            synth: *mut PDSynth,
            rangeStart: MIDINote,
            rangeEnd: MIDINote,
            transpose: f32,
        ) -> ::core::ffi::c_int,
    >,
    pub playNote: ::core::option::Option<
        unsafe extern "C" fn(
            inst: *mut PDSynthInstrument,
            frequency: f32,
            vel: f32,
            len: f32,
            when: u32,
        ) -> *mut PDSynth,
    >,
    pub playMIDINote: ::core::option::Option<
        unsafe extern "C" fn(
            inst: *mut PDSynthInstrument,
            note: MIDINote,
            vel: f32,
            len: f32,
            when: u32,
        ) -> *mut PDSynth,
    >,
    pub setPitchBend:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument, bend: f32)>,
    pub setPitchBendRange:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument, halfSteps: f32)>,
    pub setTranspose:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument, halfSteps: f32)>,
    pub noteOff: ::core::option::Option<
        unsafe extern "C" fn(inst: *mut PDSynthInstrument, note: MIDINote, when: u32),
    >,
    pub allNotesOff:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument, when: u32)>,
    pub setVolume: ::core::option::Option<
        unsafe extern "C" fn(inst: *mut PDSynthInstrument, left: f32, right: f32),
    >,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(inst: *mut PDSynthInstrument, left: *mut f32, right: *mut f32),
    >,
    pub activeVoiceCount: ::core::option::Option<
        unsafe extern "C" fn(inst: *mut PDSynthInstrument) -> ::core::ffi::c_int,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_instrument() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_instrument> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_instrument>(),
        104usize,
        concat!("Size of: ", stringify!(playdate_sound_instrument))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_instrument>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_instrument))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newInstrument) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(newInstrument)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeInstrument) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(freeInstrument)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addVoice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(addVoice)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).playNote) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(playNote)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).playMIDINote) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(playMIDINote)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setPitchBend) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(setPitchBend)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setPitchBendRange) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(setPitchBendRange)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTranspose) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(setTranspose)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).noteOff) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(noteOff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).allNotesOff) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(allNotesOff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVolume) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(setVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getVolume) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(getVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).activeVoiceCount) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_instrument),
            "::",
            stringify!(activeVoiceCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SequenceTrack {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_track {
    pub newTrack: ::core::option::Option<unsafe extern "C" fn() -> *mut SequenceTrack>,
    pub freeTrack: ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack)>,
    pub setInstrument: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, inst: *mut PDSynthInstrument),
    >,
    pub getInstrument: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack) -> *mut PDSynthInstrument,
    >,
    pub addNoteEvent: ::core::option::Option<
        unsafe extern "C" fn(
            track: *mut SequenceTrack,
            step: u32,
            len: u32,
            note: MIDINote,
            velocity: f32,
        ),
    >,
    pub removeNoteEvent: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, step: u32, note: MIDINote),
    >,
    pub clearNotes: ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack)>,
    pub getControlSignalCount: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack) -> ::core::ffi::c_int,
    >,
    pub getControlSignal: ::core::option::Option<
        unsafe extern "C" fn(
            track: *mut SequenceTrack,
            idx: ::core::ffi::c_int,
        ) -> *mut ControlSignal,
    >,
    pub clearControlEvents: ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack)>,
    pub getPolyphony: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack) -> ::core::ffi::c_int,
    >,
    pub activeVoiceCount: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack) -> ::core::ffi::c_int,
    >,
    pub setMuted: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, mute: ::core::ffi::c_int),
    >,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack) -> u32>,
    pub getIndexForStep: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, step: u32) -> ::core::ffi::c_int,
    >,
    pub getNoteAtIndex: ::core::option::Option<
        unsafe extern "C" fn(
            track: *mut SequenceTrack,
            index: ::core::ffi::c_int,
            outStep: *mut u32,
            outLen: *mut u32,
            outNote: *mut MIDINote,
            outVelocity: *mut f32,
        ) -> ::core::ffi::c_int,
    >,
    pub getSignalForController: ::core::option::Option<
        unsafe extern "C" fn(
            track: *mut SequenceTrack,
            controller: ::core::ffi::c_int,
            create: ::core::ffi::c_int,
        ) -> *mut ControlSignal,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_track() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_track> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_track>(),
        136usize,
        concat!("Size of: ", stringify!(playdate_sound_track))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_track>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_track))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newTrack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(newTrack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeTrack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(freeTrack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setInstrument) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(setInstrument)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getInstrument) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(getInstrument)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addNoteEvent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(addNoteEvent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeNoteEvent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(removeNoteEvent)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearNotes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(clearNotes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getControlSignalCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(getControlSignalCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getControlSignal) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(getControlSignal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clearControlEvents) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(clearControlEvents)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getPolyphony) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(getPolyphony)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).activeVoiceCount) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(activeVoiceCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMuted) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(setMuted)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getLength) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getIndexForStep) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(getIndexForStep)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getNoteAtIndex) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(getNoteAtIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getSignalForController) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_track),
            "::",
            stringify!(getSignalForController)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundSequence {
    _unused: [u8; 0],
}
pub type SequenceFinishedCallback = ::core::option::Option<
    unsafe extern "C" fn(seq: *mut SoundSequence, userdata: *mut ::core::ffi::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_sequence {
    pub newSequence: ::core::option::Option<unsafe extern "C" fn() -> *mut SoundSequence>,
    pub freeSequence: ::core::option::Option<unsafe extern "C" fn(sequence: *mut SoundSequence)>,
    pub loadMIDIFile: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            path: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub getTime: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> u32>,
    pub setTime: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence, time: u32)>,
    pub setLoops: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            loopstart: ::core::ffi::c_int,
            loopend: ::core::ffi::c_int,
            loops: ::core::ffi::c_int,
        ),
    >,
    pub getTempo:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> ::core::ffi::c_int>,
    pub setTempo:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence, stepsPerSecond: f32)>,
    pub getTrackCount:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> ::core::ffi::c_int>,
    pub addTrack:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> *mut SequenceTrack>,
    pub getTrackAtIndex: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            track: ::core::ffi::c_uint,
        ) -> *mut SequenceTrack,
    >,
    pub setTrackAtIndex: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            track: *mut SequenceTrack,
            idx: ::core::ffi::c_uint,
        ),
    >,
    pub allNotesOff: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence)>,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> ::core::ffi::c_int>,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> u32>,
    pub play: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            finishCallback: SequenceFinishedCallback,
            userdata: *mut ::core::ffi::c_void,
        ),
    >,
    pub stop: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence)>,
    pub getCurrentStep: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            timeOffset: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub setCurrentStep: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            step: ::core::ffi::c_int,
            timeOffset: ::core::ffi::c_int,
            playNotes: ::core::ffi::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_sequence() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_sequence> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_sequence>(),
        152usize,
        concat!("Size of: ", stringify!(playdate_sound_sequence))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_sequence>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_sequence))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newSequence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(newSequence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeSequence) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(freeSequence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).loadMIDIFile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(loadMIDIFile)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(getTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(setTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLoops) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(setLoops)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTempo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(getTempo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTempo) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(setTempo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTrackCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(getTrackCount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addTrack) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(addTrack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTrackAtIndex) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(getTrackAtIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTrackAtIndex) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(setTrackAtIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).allNotesOff) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(allNotesOff)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).isPlaying) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(isPlaying)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getLength) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(getLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).play) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(play)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getCurrentStep) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(getCurrentStep)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setCurrentStep) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_sequence),
            "::",
            stringify!(setCurrentStep)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TwoPoleFilter {
    _unused: [u8; 0],
}
pub const TwoPoleFilterType_kFilterTypeLowPass: TwoPoleFilterType = 0;
pub const TwoPoleFilterType_kFilterTypeHighPass: TwoPoleFilterType = 1;
pub const TwoPoleFilterType_kFilterTypeBandPass: TwoPoleFilterType = 2;
pub const TwoPoleFilterType_kFilterTypeNotch: TwoPoleFilterType = 3;
pub const TwoPoleFilterType_kFilterTypePEQ: TwoPoleFilterType = 4;
pub const TwoPoleFilterType_kFilterTypeLowShelf: TwoPoleFilterType = 5;
pub const TwoPoleFilterType_kFilterTypeHighShelf: TwoPoleFilterType = 6;
pub type TwoPoleFilterType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_effect_twopolefilter {
    pub newFilter: ::core::option::Option<unsafe extern "C" fn() -> *mut TwoPoleFilter>,
    pub freeFilter: ::core::option::Option<unsafe extern "C" fn(filter: *mut TwoPoleFilter)>,
    pub setType: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter, type_: TwoPoleFilterType),
    >,
    pub setFrequency:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut TwoPoleFilter, frequency: f32)>,
    pub setFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter, signal: *mut PDSynthSignalValue),
    >,
    pub getFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter) -> *mut PDSynthSignalValue,
    >,
    pub setGain:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut TwoPoleFilter, gain: f32)>,
    pub setResonance:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut TwoPoleFilter, resonance: f32)>,
    pub setResonanceModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter, signal: *mut PDSynthSignalValue),
    >,
    pub getResonanceModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter) -> *mut PDSynthSignalValue,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_effect_twopolefilter() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_effect_twopolefilter> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_effect_twopolefilter>(),
        80usize,
        concat!("Size of: ", stringify!(playdate_sound_effect_twopolefilter))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_effect_twopolefilter>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(playdate_sound_effect_twopolefilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newFilter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(newFilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeFilter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(freeFilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(setType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFrequency) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(setFrequency)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFrequencyModulator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(setFrequencyModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getFrequencyModulator) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(getFrequencyModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setGain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(setGain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setResonance) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(setResonance)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setResonanceModulator) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(setResonanceModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getResonanceModulator) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_twopolefilter),
            "::",
            stringify!(getResonanceModulator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OnePoleFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_effect_onepolefilter {
    pub newFilter: ::core::option::Option<unsafe extern "C" fn() -> *mut OnePoleFilter>,
    pub freeFilter: ::core::option::Option<unsafe extern "C" fn(filter: *mut OnePoleFilter)>,
    pub setParameter:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut OnePoleFilter, parameter: f32)>,
    pub setParameterModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut OnePoleFilter, signal: *mut PDSynthSignalValue),
    >,
    pub getParameterModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut OnePoleFilter) -> *mut PDSynthSignalValue,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_effect_onepolefilter() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_effect_onepolefilter> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_effect_onepolefilter>(),
        40usize,
        concat!("Size of: ", stringify!(playdate_sound_effect_onepolefilter))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_effect_onepolefilter>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(playdate_sound_effect_onepolefilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newFilter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_onepolefilter),
            "::",
            stringify!(newFilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeFilter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_onepolefilter),
            "::",
            stringify!(freeFilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setParameter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_onepolefilter),
            "::",
            stringify!(setParameter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setParameterModulator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_onepolefilter),
            "::",
            stringify!(setParameterModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getParameterModulator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_onepolefilter),
            "::",
            stringify!(getParameterModulator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitCrusher {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_effect_bitcrusher {
    pub newBitCrusher: ::core::option::Option<unsafe extern "C" fn() -> *mut BitCrusher>,
    pub freeBitCrusher: ::core::option::Option<unsafe extern "C" fn(filter: *mut BitCrusher)>,
    pub setAmount:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut BitCrusher, amount: f32)>,
    pub setAmountModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut BitCrusher, signal: *mut PDSynthSignalValue),
    >,
    pub getAmountModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut BitCrusher) -> *mut PDSynthSignalValue,
    >,
    pub setUndersampling:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut BitCrusher, undersampling: f32)>,
    pub setUndersampleModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut BitCrusher, signal: *mut PDSynthSignalValue),
    >,
    pub getUndersampleModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut BitCrusher) -> *mut PDSynthSignalValue,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_effect_bitcrusher() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_effect_bitcrusher> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_effect_bitcrusher>(),
        64usize,
        concat!("Size of: ", stringify!(playdate_sound_effect_bitcrusher))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_effect_bitcrusher>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(playdate_sound_effect_bitcrusher)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newBitCrusher) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_bitcrusher),
            "::",
            stringify!(newBitCrusher)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeBitCrusher) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_bitcrusher),
            "::",
            stringify!(freeBitCrusher)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setAmount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_bitcrusher),
            "::",
            stringify!(setAmount)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setAmountModulator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_bitcrusher),
            "::",
            stringify!(setAmountModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getAmountModulator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_bitcrusher),
            "::",
            stringify!(getAmountModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setUndersampling) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_bitcrusher),
            "::",
            stringify!(setUndersampling)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setUndersampleModulator) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_bitcrusher),
            "::",
            stringify!(setUndersampleModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getUndersampleModulator) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_bitcrusher),
            "::",
            stringify!(getUndersampleModulator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RingModulator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_effect_ringmodulator {
    pub newRingmod: ::core::option::Option<unsafe extern "C" fn() -> *mut RingModulator>,
    pub freeRingmod: ::core::option::Option<unsafe extern "C" fn(filter: *mut RingModulator)>,
    pub setFrequency:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut RingModulator, frequency: f32)>,
    pub setFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut RingModulator, signal: *mut PDSynthSignalValue),
    >,
    pub getFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut RingModulator) -> *mut PDSynthSignalValue,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_effect_ringmodulator() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_effect_ringmodulator> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_effect_ringmodulator>(),
        40usize,
        concat!("Size of: ", stringify!(playdate_sound_effect_ringmodulator))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_effect_ringmodulator>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(playdate_sound_effect_ringmodulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newRingmod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_ringmodulator),
            "::",
            stringify!(newRingmod)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeRingmod) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_ringmodulator),
            "::",
            stringify!(freeRingmod)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFrequency) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_ringmodulator),
            "::",
            stringify!(setFrequency)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFrequencyModulator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_ringmodulator),
            "::",
            stringify!(setFrequencyModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getFrequencyModulator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_ringmodulator),
            "::",
            stringify!(getFrequencyModulator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DelayLine {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DelayLineTap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_effect_delayline {
    pub newDelayLine: ::core::option::Option<
        unsafe extern "C" fn(
            length: ::core::ffi::c_int,
            stereo: ::core::ffi::c_int,
        ) -> *mut DelayLine,
    >,
    pub freeDelayLine: ::core::option::Option<unsafe extern "C" fn(filter: *mut DelayLine)>,
    pub setLength:
        ::core::option::Option<unsafe extern "C" fn(d: *mut DelayLine, frames: ::core::ffi::c_int)>,
    pub setFeedback: ::core::option::Option<unsafe extern "C" fn(d: *mut DelayLine, fb: f32)>,
    pub addTap: ::core::option::Option<
        unsafe extern "C" fn(d: *mut DelayLine, delay: ::core::ffi::c_int) -> *mut DelayLineTap,
    >,
    pub freeTap: ::core::option::Option<unsafe extern "C" fn(tap: *mut DelayLineTap)>,
    pub setTapDelay: ::core::option::Option<
        unsafe extern "C" fn(t: *mut DelayLineTap, frames: ::core::ffi::c_int),
    >,
    pub setTapDelayModulator: ::core::option::Option<
        unsafe extern "C" fn(t: *mut DelayLineTap, mod_: *mut PDSynthSignalValue),
    >,
    pub getTapDelayModulator: ::core::option::Option<
        unsafe extern "C" fn(t: *mut DelayLineTap) -> *mut PDSynthSignalValue,
    >,
    pub setTapChannelsFlipped: ::core::option::Option<
        unsafe extern "C" fn(t: *mut DelayLineTap, flip: ::core::ffi::c_int),
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_effect_delayline() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_effect_delayline> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_effect_delayline>(),
        80usize,
        concat!("Size of: ", stringify!(playdate_sound_effect_delayline))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_effect_delayline>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_effect_delayline))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newDelayLine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(newDelayLine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeDelayLine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(freeDelayLine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLength) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(setLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFeedback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(setFeedback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addTap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(addTap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeTap) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(freeTap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTapDelay) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(setTapDelay)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTapDelayModulator) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(setTapDelayModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getTapDelayModulator) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(getTapDelayModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setTapChannelsFlipped) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_delayline),
            "::",
            stringify!(setTapChannelsFlipped)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Overdrive {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_effect_overdrive {
    pub newOverdrive: ::core::option::Option<unsafe extern "C" fn() -> *mut Overdrive>,
    pub freeOverdrive: ::core::option::Option<unsafe extern "C" fn(filter: *mut Overdrive)>,
    pub setGain: ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive, gain: f32)>,
    pub setLimit: ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive, limit: f32)>,
    pub setLimitModulator: ::core::option::Option<
        unsafe extern "C" fn(o: *mut Overdrive, mod_: *mut PDSynthSignalValue),
    >,
    pub getLimitModulator:
        ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive) -> *mut PDSynthSignalValue>,
    pub setOffset: ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive, offset: f32)>,
    pub setOffsetModulator: ::core::option::Option<
        unsafe extern "C" fn(o: *mut Overdrive, mod_: *mut PDSynthSignalValue),
    >,
    pub getOffsetModulator:
        ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive) -> *mut PDSynthSignalValue>,
}
#[test]
fn bindgen_test_layout_playdate_sound_effect_overdrive() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_effect_overdrive> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_effect_overdrive>(),
        72usize,
        concat!("Size of: ", stringify!(playdate_sound_effect_overdrive))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_effect_overdrive>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_effect_overdrive))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newOverdrive) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(newOverdrive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeOverdrive) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(freeOverdrive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setGain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(setGain)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLimit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(setLimit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setLimitModulator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(setLimitModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getLimitModulator) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(getLimitModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setOffset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(setOffset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setOffsetModulator) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(setOffsetModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getOffsetModulator) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect_overdrive),
            "::",
            stringify!(getOffsetModulator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundEffect {
    _unused: [u8; 0],
}
pub type effectProc = ::core::option::Option<
    unsafe extern "C" fn(
        e: *mut SoundEffect,
        left: *mut i32,
        right: *mut i32,
        nsamples: ::core::ffi::c_int,
        bufactive: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_effect {
    pub newEffect: ::core::option::Option<
        unsafe extern "C" fn(
            proc_: effectProc,
            userdata: *mut ::core::ffi::c_void,
        ) -> *mut SoundEffect,
    >,
    pub freeEffect: ::core::option::Option<unsafe extern "C" fn(effect: *mut SoundEffect)>,
    pub setMix: ::core::option::Option<unsafe extern "C" fn(effect: *mut SoundEffect, level: f32)>,
    pub setMixModulator: ::core::option::Option<
        unsafe extern "C" fn(effect: *mut SoundEffect, signal: *mut PDSynthSignalValue),
    >,
    pub getMixModulator: ::core::option::Option<
        unsafe extern "C" fn(effect: *mut SoundEffect) -> *mut PDSynthSignalValue,
    >,
    pub setUserdata: ::core::option::Option<
        unsafe extern "C" fn(effect: *mut SoundEffect, userdata: *mut ::core::ffi::c_void),
    >,
    pub getUserdata: ::core::option::Option<
        unsafe extern "C" fn(effect: *mut SoundEffect) -> *mut ::core::ffi::c_void,
    >,
    pub twopolefilter: *const playdate_sound_effect_twopolefilter,
    pub onepolefilter: *const playdate_sound_effect_onepolefilter,
    pub bitcrusher: *const playdate_sound_effect_bitcrusher,
    pub ringmodulator: *const playdate_sound_effect_ringmodulator,
    pub delayline: *const playdate_sound_effect_delayline,
    pub overdrive: *const playdate_sound_effect_overdrive,
}
#[test]
fn bindgen_test_layout_playdate_sound_effect() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_effect> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_effect>(),
        104usize,
        concat!("Size of: ", stringify!(playdate_sound_effect))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_effect>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_effect))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newEffect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(newEffect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeEffect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(freeEffect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMix) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(setMix)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMixModulator) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(setMixModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getMixModulator) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(getMixModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setUserdata) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(setUserdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getUserdata) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(getUserdata)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).twopolefilter) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(twopolefilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).onepolefilter) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(onepolefilter)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bitcrusher) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(bitcrusher)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ringmodulator) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(ringmodulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).delayline) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(delayline)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).overdrive) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_effect),
            "::",
            stringify!(overdrive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundChannel {
    _unused: [u8; 0],
}
pub type AudioSourceFunction = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut ::core::ffi::c_void,
        left: *mut i16,
        right: *mut i16,
        len: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound_channel {
    pub newChannel: ::core::option::Option<unsafe extern "C" fn() -> *mut SoundChannel>,
    pub freeChannel: ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel)>,
    pub addSource: ::core::option::Option<
        unsafe extern "C" fn(
            channel: *mut SoundChannel,
            source: *mut SoundSource,
        ) -> ::core::ffi::c_int,
    >,
    pub removeSource: ::core::option::Option<
        unsafe extern "C" fn(
            channel: *mut SoundChannel,
            source: *mut SoundSource,
        ) -> ::core::ffi::c_int,
    >,
    pub addCallbackSource: ::core::option::Option<
        unsafe extern "C" fn(
            channel: *mut SoundChannel,
            callback: AudioSourceFunction,
            context: *mut ::core::ffi::c_void,
            stereo: ::core::ffi::c_int,
        ) -> *mut SoundSource,
    >,
    pub addEffect: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, effect: *mut SoundEffect),
    >,
    pub removeEffect: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, effect: *mut SoundEffect),
    >,
    pub setVolume:
        ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel, volume: f32)>,
    pub getVolume: ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel) -> f32>,
    pub setVolumeModulator: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, mod_: *mut PDSynthSignalValue),
    >,
    pub getVolumeModulator: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> *mut PDSynthSignalValue,
    >,
    pub setPan: ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel, pan: f32)>,
    pub setPanModulator: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, mod_: *mut PDSynthSignalValue),
    >,
    pub getPanModulator: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> *mut PDSynthSignalValue,
    >,
    pub getDryLevelSignal: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> *mut PDSynthSignalValue,
    >,
    pub getWetLevelSignal: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> *mut PDSynthSignalValue,
    >,
}
#[test]
fn bindgen_test_layout_playdate_sound_channel() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound_channel> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound_channel>(),
        128usize,
        concat!("Size of: ", stringify!(playdate_sound_channel))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound_channel>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound_channel))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).newChannel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(newChannel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeChannel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(freeChannel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addSource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(addSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeSource) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(removeSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addCallbackSource) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(addCallbackSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addEffect) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(addEffect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeEffect) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(removeEffect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVolume) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(setVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getVolume) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(getVolume)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setVolumeModulator) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(setVolumeModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getVolumeModulator) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(getVolumeModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setPan) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(setPan)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setPanModulator) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(setPanModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getPanModulator) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(getPanModulator)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getDryLevelSignal) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(getDryLevelSignal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getWetLevelSignal) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound_channel),
            "::",
            stringify!(getWetLevelSignal)
        )
    );
}
pub type RecordCallback = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut ::core::ffi::c_void,
        buffer: *mut i16,
        length: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
pub const MicSource_kMicInputAutodetect: MicSource = 0;
pub const MicSource_kMicInputInternal: MicSource = 1;
pub const MicSource_kMicInputHeadset: MicSource = 2;
pub type MicSource = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_sound {
    pub channel: *const playdate_sound_channel,
    pub fileplayer: *const playdate_sound_fileplayer,
    pub sample: *const playdate_sound_sample,
    pub sampleplayer: *const playdate_sound_sampleplayer,
    pub synth: *const playdate_sound_synth,
    pub sequence: *const playdate_sound_sequence,
    pub effect: *const playdate_sound_effect,
    pub lfo: *const playdate_sound_lfo,
    pub envelope: *const playdate_sound_envelope,
    pub source: *const playdate_sound_source,
    pub controlsignal: *const playdate_control_signal,
    pub track: *const playdate_sound_track,
    pub instrument: *const playdate_sound_instrument,
    pub getCurrentTime: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    pub addSource: ::core::option::Option<
        unsafe extern "C" fn(
            callback: AudioSourceFunction,
            context: *mut ::core::ffi::c_void,
            stereo: ::core::ffi::c_int,
        ) -> *mut SoundSource,
    >,
    pub getDefaultChannel: ::core::option::Option<unsafe extern "C" fn() -> *mut SoundChannel>,
    pub addChannel: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> ::core::ffi::c_int,
    >,
    pub removeChannel: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> ::core::ffi::c_int,
    >,
    pub setMicCallback: ::core::option::Option<
        unsafe extern "C" fn(
            callback: RecordCallback,
            context: *mut ::core::ffi::c_void,
            source: MicSource,
        ) -> ::core::ffi::c_int,
    >,
    pub getHeadphoneState: ::core::option::Option<
        unsafe extern "C" fn(
            headphone: *mut ::core::ffi::c_int,
            headsetmic: *mut ::core::ffi::c_int,
            changeCallback: ::core::option::Option<
                unsafe extern "C" fn(headphone: ::core::ffi::c_int, mic: ::core::ffi::c_int),
            >,
        ),
    >,
    pub setOutputsActive: ::core::option::Option<
        unsafe extern "C" fn(headphone: ::core::ffi::c_int, speaker: ::core::ffi::c_int),
    >,
    pub removeSource: ::core::option::Option<
        unsafe extern "C" fn(source: *mut SoundSource) -> ::core::ffi::c_int,
    >,
    pub signal: *const playdate_sound_signal,
    pub getError: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
}
#[test]
fn bindgen_test_layout_playdate_sound() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_sound> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_sound>(),
        192usize,
        concat!("Size of: ", stringify!(playdate_sound))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_sound>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_sound))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fileplayer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(fileplayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sample) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(sample)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sampleplayer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(sampleplayer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).synth) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(synth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).effect) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(effect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lfo) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(lfo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).envelope) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(envelope)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).controlsignal) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(controlsignal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).track) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(track)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).instrument) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(instrument)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getCurrentTime) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(getCurrentTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addSource) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(addSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getDefaultChannel) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(getDefaultChannel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addChannel) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(addChannel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeChannel) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(removeChannel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMicCallback) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(setMicCallback)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getHeadphoneState) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(getHeadphoneState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setOutputsActive) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(setOutputsActive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).removeSource) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(removeSource)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).signal) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(signal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getError) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_sound),
            "::",
            stringify!(getError)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_display {
    pub getWidth: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub getHeight: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub setRefreshRate: ::core::option::Option<unsafe extern "C" fn(rate: f32)>,
    pub setInverted: ::core::option::Option<unsafe extern "C" fn(flag: ::core::ffi::c_int)>,
    pub setScale: ::core::option::Option<unsafe extern "C" fn(s: ::core::ffi::c_uint)>,
    pub setMosaic: ::core::option::Option<
        unsafe extern "C" fn(x: ::core::ffi::c_uint, y: ::core::ffi::c_uint),
    >,
    pub setFlipped:
        ::core::option::Option<unsafe extern "C" fn(x: ::core::ffi::c_int, y: ::core::ffi::c_int)>,
    pub setOffset:
        ::core::option::Option<unsafe extern "C" fn(x: ::core::ffi::c_int, y: ::core::ffi::c_int)>,
}
#[test]
fn bindgen_test_layout_playdate_display() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_display> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_display>(),
        64usize,
        concat!("Size of: ", stringify!(playdate_display))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_display>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_display))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getWidth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_display),
            "::",
            stringify!(getWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getHeight) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_display),
            "::",
            stringify!(getHeight)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setRefreshRate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_display),
            "::",
            stringify!(setRefreshRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setInverted) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_display),
            "::",
            stringify!(setInverted)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setScale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_display),
            "::",
            stringify!(setScale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setMosaic) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_display),
            "::",
            stringify!(setMosaic)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setFlipped) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_display),
            "::",
            stringify!(setFlipped)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).setOffset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_display),
            "::",
            stringify!(setOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDScore {
    pub rank: u32,
    pub value: u32,
    pub player: *mut ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_PDScore() {
    const UNINIT: ::core::mem::MaybeUninit<PDScore> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PDScore>(),
        16usize,
        concat!("Size of: ", stringify!(PDScore))
    );
    assert_eq!(
        ::core::mem::align_of::<PDScore>(),
        8usize,
        concat!("Alignment of ", stringify!(PDScore))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rank) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScore),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScore),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).player) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScore),
            "::",
            stringify!(player)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDScoresList {
    pub boardID: *mut ::core::ffi::c_char,
    pub count: ::core::ffi::c_uint,
    pub lastUpdated: u32,
    pub playerIncluded: ::core::ffi::c_int,
    pub limit: ::core::ffi::c_uint,
    pub scores: *mut PDScore,
}
#[test]
fn bindgen_test_layout_PDScoresList() {
    const UNINIT: ::core::mem::MaybeUninit<PDScoresList> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PDScoresList>(),
        32usize,
        concat!("Size of: ", stringify!(PDScoresList))
    );
    assert_eq!(
        ::core::mem::align_of::<PDScoresList>(),
        8usize,
        concat!("Alignment of ", stringify!(PDScoresList))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).boardID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScoresList),
            "::",
            stringify!(boardID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScoresList),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastUpdated) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScoresList),
            "::",
            stringify!(lastUpdated)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).playerIncluded) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScoresList),
            "::",
            stringify!(playerIncluded)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScoresList),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scores) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PDScoresList),
            "::",
            stringify!(scores)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDBoard {
    pub boardID: *mut ::core::ffi::c_char,
    pub name: *mut ::core::ffi::c_char,
}
#[test]
fn bindgen_test_layout_PDBoard() {
    const UNINIT: ::core::mem::MaybeUninit<PDBoard> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PDBoard>(),
        16usize,
        concat!("Size of: ", stringify!(PDBoard))
    );
    assert_eq!(
        ::core::mem::align_of::<PDBoard>(),
        8usize,
        concat!("Alignment of ", stringify!(PDBoard))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).boardID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDBoard),
            "::",
            stringify!(boardID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PDBoard),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDBoardsList {
    pub count: ::core::ffi::c_uint,
    pub lastUpdated: u32,
    pub boards: *mut PDBoard,
}
#[test]
fn bindgen_test_layout_PDBoardsList() {
    const UNINIT: ::core::mem::MaybeUninit<PDBoardsList> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PDBoardsList>(),
        16usize,
        concat!("Size of: ", stringify!(PDBoardsList))
    );
    assert_eq!(
        ::core::mem::align_of::<PDBoardsList>(),
        8usize,
        concat!("Alignment of ", stringify!(PDBoardsList))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDBoardsList),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lastUpdated) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PDBoardsList),
            "::",
            stringify!(lastUpdated)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).boards) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PDBoardsList),
            "::",
            stringify!(boards)
        )
    );
}
pub type AddScoreCallback = ::core::option::Option<
    unsafe extern "C" fn(score: *mut PDScore, errorMessage: *const ::core::ffi::c_char),
>;
pub type PersonalBestCallback = ::core::option::Option<
    unsafe extern "C" fn(score: *mut PDScore, errorMessage: *const ::core::ffi::c_char),
>;
pub type BoardsListCallback = ::core::option::Option<
    unsafe extern "C" fn(boards: *mut PDBoardsList, errorMessage: *const ::core::ffi::c_char),
>;
pub type ScoresCallback = ::core::option::Option<
    unsafe extern "C" fn(scores: *mut PDScoresList, errorMessage: *const ::core::ffi::c_char),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playdate_scoreboards {
    pub addScore: ::core::option::Option<
        unsafe extern "C" fn(
            boardId: *const ::core::ffi::c_char,
            value: u32,
            callback: AddScoreCallback,
        ) -> ::core::ffi::c_int,
    >,
    pub getPersonalBest: ::core::option::Option<
        unsafe extern "C" fn(
            boardId: *const ::core::ffi::c_char,
            callback: PersonalBestCallback,
        ) -> ::core::ffi::c_int,
    >,
    pub freeScore: ::core::option::Option<unsafe extern "C" fn(score: *mut PDScore)>,
    pub getScoreboards: ::core::option::Option<
        unsafe extern "C" fn(callback: BoardsListCallback) -> ::core::ffi::c_int,
    >,
    pub freeBoardsList: ::core::option::Option<unsafe extern "C" fn(boardsList: *mut PDBoardsList)>,
    pub getScores: ::core::option::Option<
        unsafe extern "C" fn(
            boardId: *const ::core::ffi::c_char,
            callback: ScoresCallback,
        ) -> ::core::ffi::c_int,
    >,
    pub freeScoresList: ::core::option::Option<unsafe extern "C" fn(scoresList: *mut PDScoresList)>,
}
#[test]
fn bindgen_test_layout_playdate_scoreboards() {
    const UNINIT: ::core::mem::MaybeUninit<playdate_scoreboards> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<playdate_scoreboards>(),
        56usize,
        concat!("Size of: ", stringify!(playdate_scoreboards))
    );
    assert_eq!(
        ::core::mem::align_of::<playdate_scoreboards>(),
        8usize,
        concat!("Alignment of ", stringify!(playdate_scoreboards))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).addScore) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_scoreboards),
            "::",
            stringify!(addScore)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getPersonalBest) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_scoreboards),
            "::",
            stringify!(getPersonalBest)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeScore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_scoreboards),
            "::",
            stringify!(freeScore)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getScoreboards) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_scoreboards),
            "::",
            stringify!(getScoreboards)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeBoardsList) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_scoreboards),
            "::",
            stringify!(freeBoardsList)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).getScores) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_scoreboards),
            "::",
            stringify!(getScores)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).freeScoresList) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(playdate_scoreboards),
            "::",
            stringify!(freeScoresList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlaydateAPI {
    pub system: *const playdate_sys,
    pub file: *const playdate_file,
    pub graphics: *const playdate_graphics,
    pub sprite: *const playdate_sprite,
    pub display: *const playdate_display,
    pub sound: *const playdate_sound,
    pub lua: *const playdate_lua,
    pub json: *const playdate_json,
    pub scoreboards: *const playdate_scoreboards,
}
#[test]
fn bindgen_test_layout_PlaydateAPI() {
    const UNINIT: ::core::mem::MaybeUninit<PlaydateAPI> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PlaydateAPI>(),
        72usize,
        concat!("Size of: ", stringify!(PlaydateAPI))
    );
    assert_eq!(
        ::core::mem::align_of::<PlaydateAPI>(),
        8usize,
        concat!("Alignment of ", stringify!(PlaydateAPI))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(system)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).graphics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(graphics)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sprite) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(sprite)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).display) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sound) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(sound)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lua) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(lua)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).json) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(json)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).scoreboards) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PlaydateAPI),
            "::",
            stringify!(scoreboards)
        )
    );
}
pub const PDSystemEvent_kEventInit: PDSystemEvent = 0;
pub const PDSystemEvent_kEventInitLua: PDSystemEvent = 1;
pub const PDSystemEvent_kEventLock: PDSystemEvent = 2;
pub const PDSystemEvent_kEventUnlock: PDSystemEvent = 3;
pub const PDSystemEvent_kEventPause: PDSystemEvent = 4;
pub const PDSystemEvent_kEventResume: PDSystemEvent = 5;
pub const PDSystemEvent_kEventTerminate: PDSystemEvent = 6;
pub const PDSystemEvent_kEventKeyPressed: PDSystemEvent = 7;
pub const PDSystemEvent_kEventKeyReleased: PDSystemEvent = 8;
pub const PDSystemEvent_kEventLowPower: PDSystemEvent = 9;
pub type PDSystemEvent = ::core::ffi::c_uint;
extern "C" {
    pub fn eventHandler(
        playdate: *mut PlaydateAPI,
        event: PDSystemEvent,
        arg: u32,
    ) -> ::core::ffi::c_int;
}
pub type __builtin_va_list = *mut ::core::ffi::c_char;
pub type __uint128_t = u128;
